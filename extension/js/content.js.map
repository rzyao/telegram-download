{"version":3,"file":"content.js","sources":["../../src/js/utils.ts","../../src/js/content.ts"],"sourcesContent":["export const log = {\n  info: (identifier: string, message: string, ...args: any[]) => {\n    console.log(`%c[${identifier}] : ${message}`, `color: black;`, ...args);\n  },\n  error: (identifier: string, message: string, ...args: any[]) => {\n    console.warn(`%c[${identifier}] : ${message}`, `color: red;`, ...args);\n  }\n}\n\n/**\n * 根据选择器获取 HTMLElement 元素\n * @param parentElement 父容器，可以是 HTMLElement 或 Document\n * @param selector CSS 选择器字符串\n * @returns 找到的 HTMLElement，如果出现异常则返回 null\n */\nexport function getHTMLElement(\n  parentElement: HTMLElement | Document,\n  selector: string,\n): HTMLElement | null {\n  try {\n    // 使用 querySelector 查找元素\n    const element = parentElement.querySelector(selector);\n\n    // 如果没有找到，抛出异常\n    if (!element) {\n      throw new Error(`未找到匹配的元素，选择器: \"${selector}\"`);\n    }\n\n    // 如果找到的元素不是 HTMLElement 类型，也抛出异常\n    if (!(element instanceof HTMLElement)) {\n      throw new Error(`选择器 \"${selector}\" 返回的元素不是 HTMLElement 类型`);\n    }\n\n    return element;\n  } catch (error) {\n    console.error('getHTMLElement 发生错误:', error);\n    return null;\n  }\n}\n\n/**\n * 根据选择器获取 HTMLVideoElement 元素\n * @param parentElement 父容器，可以是 HTMLElement 或 Document\n * @param selector CSS 选择器，用于定位视频元素\n * @returns 找到的 HTMLVideoElement，如果出现异常则返回 null\n */\nexport function getHTMLVideoElement(\n  parentElement: HTMLElement | Document,\n  selector: string,\n): HTMLVideoElement | null {\n  try {\n    const element = parentElement.querySelector(selector);\n\n    // 如果没有找到元素，抛出异常\n    if (!element) {\n      throw new Error(`未找到匹配的元素，选择器: \"${selector}\"`);\n    }\n\n    // 如果找到的元素不是 HTMLVideoElement 类型，抛出异常\n    if (!(element instanceof HTMLVideoElement)) {\n      throw new Error(`选择器 \"${selector}\" 返回的元素不是 HTMLVideoElement 类型`);\n    }\n\n    return element;\n  } catch (error) {\n    console.error('getHTMLVideoElement 发生错误:', error);\n    return null;\n  }\n}\n\n/**\n * 根据选择器获取 HTMLImageElement 元素\n * @param parentElement 父容器，可以是 HTMLElement 或 Document\n * @param selector CSS 选择器，用于定位图片元素\n * @returns 找到的 HTMLImageElement，如果出现异常则返回 null\n */\nexport function getHTMLImgElement(\n  parentElement: HTMLElement | Document,\n  selector: string,\n): HTMLImageElement | null {\n  try {\n    // 使用 querySelector 查找元素\n    const element = parentElement.querySelector(selector);\n\n    // 如果没有找到元素，则抛出异常\n    if (!element) {\n      throw new Error(`未找到匹配的元素，选择器: \"${selector}\"`);\n    }\n\n    // 如果找到的元素不是 HTMLImageElement 类型，也抛出异常\n    if (!(element instanceof HTMLImageElement)) {\n      throw new Error(`选择器 \"${selector}\" 返回的元素不是 HTMLImageElement 类型`);\n    }\n\n    return element;\n  } catch (error) {\n    console.error('getHTMLImgElement 发生错误:', error);\n    return null;\n  }\n}\n\n/**\n * 检测是否存在指定的 HTMLElement 元素\n * @param parentElement 父容器，可以是 HTMLElement 或 Document\n * @param selector CSS 选择器字符串，用于定位元素\n * @returns 如果匹配到元素且属于 HTMLElement 类型，则返回 true，否则返回 false\n */\nexport function existsHTMLElement(\n  parentElement: HTMLElement | Document,\n  selector: string,\n): boolean {\n  const element = parentElement.querySelector(selector);\n  return !!(element && element instanceof HTMLElement);\n}\n\n/**\n * 根据选择器查找 HTMLElement 元素\n * @param parentElement 父容器，可以是 HTMLElement 或 Document\n * @param selector CSS 选择器字符串\n * @returns 找到的 HTMLElement 或 null\n */\nexport function findHTMLElement(\n  parentElement: HTMLElement | Document,\n  selector: string,\n): HTMLElement | null {\n  const element = parentElement.querySelector(selector);\n  return element && element instanceof HTMLElement ? element : null;\n}\n\n/**\n * 生成一个唯一的 ID\n * @returns 一个唯一的字符串 ID\n */\nexport function generateUniqueId(): string {\n  // 如果支持 crypto.randomUUID，直接使用\n  if (typeof crypto !== 'undefined' && crypto.randomUUID) {\n    return crypto.randomUUID();\n  } else {\n    // 备用方案：使用当前时间戳和随机数生成唯一 ID\n    const timestamp = Date.now().toString(36);\n    const randomPart = Math.random().toString(36).substring(2, 10);\n    return `${timestamp}-${randomPart}`;\n  }\n}\n/**\n * 注入脚本\n * @param {string} filePath 脚本路径\n */\nexport function injectScript(filePath: string): void {\n  const script = document.createElement('script');\n  script.src = chrome.runtime.getURL(filePath);\n  document.head.appendChild(script);\n  script.onload = () => {\n    script.remove();\n  };\n}\n\n/**\n * 注入动画样式，用于控制 iframe 的进出动画效果\n */\nexport function injectAnimationStyle(): void {\n  const style = document.createElement('style');\n  style.textContent = `\n   @keyframes slideOutRight {\n     from { transform: translateX(0); opacity: 1; }\n     to   { transform: translateX(100%); opacity: 0; }\n   }\n   @keyframes slideInRight {\n     from { transform: translateX(100%); opacity: 0; }\n     to   { transform: translateX(0); opacity: 1; }\n   }\n   .iframe-animation {\n     transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n   }\n   .slide-out { animation: slideOutRight 0.5s forwards; }\n   .slide-in  { animation: slideInRight 0.5s forwards; }\n `;\n  document.head.appendChild(style);\n}\n\n/**\n * 初始化控制扩展面板的 iframe\n * @param {string} id iframeid\n * @param {string} src html文件路径\n * @return {HTMLIFrameElement} iframe\n */\nexport function initIframe(id: string, src: string): HTMLIFrameElement {\n  const iframe = document.createElement('iframe');\n  iframe.id = id;\n  iframe.src = chrome.runtime.getURL(src);\n  Object.assign(iframe.style, {\n    position: 'fixed',\n    right: '0px',\n    bottom: '20px',\n    width: '400px',\n    height: '600px',\n    border: 'none',\n    zIndex: '2147483647',\n    boxShadow: '0 0 10px rgba(0,0,0,0.2)',\n    borderRadius: '8px',\n    transform: 'translateX(0)',\n    opacity: '1',\n    display: 'none',\n  });\n  document.body.appendChild(iframe);\n  return iframe;\n}\n\n/**\n * 添加控制按钮\n * @param {string} text 按钮文本\n * @return {HTMLButtonElement}\n */\nexport function createControlButton(text: string): HTMLButtonElement {\n  const toggleBtn = document.createElement('button');\n  Object.assign(toggleBtn.style, {\n    position: 'fixed',\n    right: '20px',\n    bottom: '20px',\n    'z-index': '2147483646',\n    padding: '8px 16px',\n    'border-radius': '4px',\n    background: '#008aff',\n    color: 'white',\n    border: 'none',\n    cursor: 'pointer',\n  });\n  toggleBtn.textContent = text;\n  document.body.appendChild(toggleBtn);\n  return toggleBtn;\n}\n\n\n/**\n * 控制iframede显示\n * @param {HTMLIFrameElement} iframe iframe元素\n * @param {HTMLButtonElement} toggleBtn 按钮元素\n * @param {boolean} isVisible 是否显示\n * @param {boolean} isAnimating 是否正在动画\n * @return {*}  {void}\n */\nexport function toggleIframe(\n  iframe: HTMLIFrameElement,\n  toggleBtn: HTMLButtonElement,\n  isVisible: boolean,\n  isAnimating: boolean,\n): void {\n  if (isAnimating) return;\n\n  if (isVisible) {\n    iframe.classList.add('slide-out');\n    toggleBtn.textContent = '任务列表';\n  } else {\n    iframe.style.display = 'block';\n    iframe.classList.add('slide-in');\n    toggleBtn.textContent = '任务列表';\n  }\n\n  iframe.addEventListener(\n    'animationend',\n    () => {\n      iframe.classList.remove(isVisible ? 'slide-out' : 'slide-in');\n      if (isVisible) {\n        iframe.style.display = 'none';\n      }\n      isVisible = !isVisible;\n      isAnimating = false;\n    },\n    { once: true },\n  );\n}\n\n/**\n * 调整iframe宽度\n * @param {HTMLIFrameElement} iframe iframe元素\n * @param {HTMLButtonElement} resizeBtn 按钮元素\n * @param {boolean} isWide 是否宽\n * @return {*}  {void}\n */\nexport function resizeIframe(iframe: HTMLIFrameElement, resizeBtn: HTMLButtonElement, isWide: boolean): void {\n  if (isWide) {\n    iframe.style.width = '400px';\n    resizeBtn.textContent = '调整宽度';\n  } else {\n    const columnCenter = document.getElementById('column-center');\n    if (columnCenter) {\n      iframe.style.width = columnCenter.clientWidth + 'px';\n      resizeBtn.textContent = '恢复原宽度';\n    }\n  }\n  isWide = !isWide;\n}\n\n/**\n * 获取本地化文本\n * @return {*}  {{\n *   dialog: {\n *     title: string;\n *     butImg: string;\n *     butVideo: string;\n *     butAllFile: string;\n *     progressText: string;\n *     taskPanel: string;\n *   };\n * }}\n */\nexport function initLocalization(): LocalizationData {\n  // 默认语言设置为中文\n  let language = 'zh-CN';\n  // 定义中英文的本地化数据\n  const data = {\n    zh: {\n      title: '电报视频下载器',\n      butImg: '下载图片',\n      butVideo: '下载视频',\n      butAllFile: '强制下载',\n      progressText: '下载进度：',\n      taskPanel: '任务面板',\n    },\n    en: {\n      title: 'Telegram Video Downloader',\n      butImg: 'DOWNLOAD IMAGE',\n      butVideo: 'DOWNLOAD VIDEO',\n      butAllFile: 'FORCE DOWNLOAD',\n      progressText: 'Download progress:',\n      taskPanel: 'Task Panel',\n    },\n  };\n\n  // 检测用户的浏览器语言\n  const userLanguage = navigator.language;\n  if (userLanguage) {\n    language = userLanguage;\n  }\n\n  // 返回本地化文本\n  return language.includes('zh') ? data['zh'] : data['en'];\n}\n\n\n/**\n * 初始化html模板\n * @param {*} localizedText\n * @return {*} {\n *   imageDownloadButton: string;\n *   videoDownloadButton: string;\n *   progressContainer: string;\n *   downloadCheckbox: string;\n *   allFilesDownloadButton: string;\n *   statusBoxInnerHTML: string;\n * }\n */\nexport function initHtmlTemplate(butImg: string, butVideo: string, butAllFile: string): HtmlTemplates {\n  // 定义下载按钮的 HTML 模板\n  const imageDownloadButton = `\n   <div class=\"content-teleram-script\">\n     <div class=\"downloadBtnIns\" style=\"max-width: 420px; display: flex; justify-content: center;\">\n       <button class=\"download-images  down_btn_img\" data-text=\"FORCE DOWNLOAD\" title=\"Download all resources by default, or please select the resources you want to download in batches\" style=\"color: white; background-color: #008aff; border-radius: 5px;\">\n       ${butImg}\n       </button>\n     </div>\n   </div>\n   `;\n  // 视频下载按钮\n  const videoDownloadButton = `\n   <div class=\"content-teleram-script\">\n     <div class=\"downloadBtnIns\" style=\"max-width: 420px; display: flex; justify-content: center;\">\n       <button class=\"download-videos down_btn_video\" data-text=\"FORCE DOWNLOAD\" title=\"Download all resources by default, or please select the resources you want to download in batches\" style=\"color: white; background-color: #008aff; border-radius: 5px;\">\n       ${butVideo}\n       </button>\n     </div>\n   </div>\n   `;\n  // 下载进度容器\n  const progressContainer = `\n   <div class=\"content-teleram-script down_btn_progress\"></div>\n   `;\n  // 下载选择框\n  const downloadCheckbox =\n    '<input type=\"checkbox\" class=\"download-check-item\" name=\"checkbox-down\" checked=\"true\" />';\n  // 全部下载按钮\n  const allFilesDownloadButton = `\n   <div style=\"max-width: 420px; display: flex; justify-content: center;\" class=\"check-all-download\">\n       <button class=\"download-checkbox-all\" data-text=\"FORCE DOWNLOAD\" title=\"Download all resources by default, or please select the resources you want to download in batches\" style=\"color: white; background-color: #008aff; border-radius: 5px; padding: 5px 10px;\">\n       ${butAllFile}\n       </button>\n   </div>\n   `;\n  // 下载状态容器\n  const statusBoxInnerHTML = `<div class=\"status-box\"/> <div class=\"download-status\"/></div>`;\n  return {\n    imageDownloadButton,\n    videoDownloadButton,\n    progressContainer,\n    downloadCheckbox,\n    allFilesDownloadButton,\n    statusBoxInnerHTML,\n  };\n}\n\n/**\n * 添加元素到指定的父元素\n * @param {HTMLElement} parentElement 父元素\n * @param {string} buttonType 按钮类型\n * @param {string} buttonHtml 按钮HTML\n * @param {(HTMLElement | 'attachment')} targetElement 目标元素\n * @param {{\n *     imageDownloadButton: string;\n *     videoDownloadButton: string;\n *     allFilesDownloadButton: string;\n *     progressContainer: string;\n *     downloadCheckbox: string;\n *     statusBoxInnerHTML: string;\n *   }} htmlTemplate 模板\n */\nexport function appendElement(\n  parentElement: HTMLElement,\n  buttonType: string,\n  buttonHtml: string,\n  targetElement: HTMLElement | 'attachment',\n  htmlTemplate: HtmlTemplates,\n): void {\n  console.log('appendElement', parentElement);\n  // 如果按钮已存在则直接返回，避免重复添加\n  if (parentElement.querySelector(`.down_btn_${buttonType}`)) return;\n\n  const container: HTMLElement = targetElement === 'attachment' ? parentElement : targetElement;\n\n  // 创建包装容器并填充按钮HTML\n  const wrapperDiv = document.createElement('div');\n  wrapperDiv.className = `${buttonType}-telegram-script`;\n  wrapperDiv.innerHTML = buttonHtml.trim();\n\n  // 将包装的按钮元素插入到目标容器中\n  container.appendChild(wrapperDiv.firstChild as Node);\n\n  // 如果存在下载检查框，则添加状态容器\n  const checkBox = container.querySelector('.download-check-item') as HTMLElement | null;\n  if (checkBox) {\n    checkBox.setAttribute('id', generateUniqueId());\n    const statusWrapper = document.createElement('div');\n    statusWrapper.className = `${buttonType}-telegram-script`;\n    statusWrapper.innerHTML = htmlTemplate.statusBoxInnerHTML.trim();\n    const statusBox = statusWrapper.querySelector('.status-box') as HTMLElement;\n    statusBox.id = generateUniqueId();\n    container.appendChild(statusWrapper.firstChild as Node);\n  }\n};\n\n/**\n * 设置元素状态\n * @param {string} id 元素ID\n * @param {string} status 状态\n * @return {*}  {void}\n */\nexport function setElementStatus(id: string, status: string): void {\n  const statusContainerElement = document.getElementById(id) as HTMLElement;\n  const statusElement = getHTMLElement(statusContainerElement, '.download-status') as HTMLElement;\n  if (statusContainerElement) {\n    switch (status) {\n      case 'success':\n        statusElement.setAttribute('class', 'download-status status-success');\n        break;\n      case 'error':\n        statusElement.setAttribute('class', 'download-status status-error');\n        break;\n    }\n  }\n};\n\n/**\n * 发送消息到iframe\n * @param {string} type 类型\n * @param {string | undefined} id ID\n * @param {string} status 状态\n * @param {any} info 信息\n * @param {any} detail 详情\n */\nexport function sendMessageToIframe(\n  type: string,\n  id: string | undefined,\n  status: string,\n  info: any,\n  detail: any = {},\n) {\n  log.info('content.ts', 'sendMessageToIframe', type, id, status, info, detail);\n  if (!id) return;\n  const iframe = document.getElementById('task-list-iframe') as HTMLIFrameElement;\n  if (iframe?.contentWindow) {\n    iframe.contentWindow.postMessage({ type, id, status, info, detail }, '*');\n  }\n};\n\n/**\n * 等待元素加载\n */\nexport function waitForElement(selector: string, timeout = 15000): Promise<HTMLElement | Error> {\n  return new Promise((resolve, reject) => {\n    // 如果已存在则直接返回\n    const target = document.querySelector(selector) as HTMLElement;\n    if (target) return resolve(target);\n\n    // 配置观察选项\n    const observer = new MutationObserver((mutations) => {\n      const updatedTarget = document.querySelector(selector) as HTMLElement;\n      if (updatedTarget) {\n        observer.disconnect();\n        resolve(updatedTarget);\n      }\n    });\n\n    // 开始观察整个文档\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n    });\n\n    setTimeout(() => {\n      observer.disconnect();\n      reject(new Error(`元素 ${selector} 加载超时`));\n    }, timeout);\n  });\n};\n\n/**\n * 等待视频源加载\n */\nexport function waitForVideoSrcLoad(\n  videoElement: HTMLVideoElement,\n  interval = 100,\n): Promise<string | Error> {\n  return new Promise((resolve, reject) => {\n    if (!videoElement) return reject(new Error('无效的视频元素'));\n\n    const checkSrc = setInterval(() => {\n      if (videoElement.src.includes('blob') || videoElement.src.includes('stream')) {\n        clearInterval(checkSrc);\n        clearTimeout(timeout);\n        resolve(videoElement.src);\n      }\n    }, interval);\n\n    // 可选：设置一个超时来避免无限等待\n    const timeout = setTimeout(() => {\n      clearInterval(checkSrc);\n      reject(new Error('等待视频源超时'));\n    }, 10000);\n  });\n};\n\n/**\n * 获取剪贴板文件名\n * @return {*}  {(Promise<string | null>)}\n */\nexport async function getFileNameByClipBoard(): Promise<string | null> {\n  try {\n    const clipboardText = await navigator.clipboard.readText();\n    return clipboardText;\n  } catch (error) {\n    return null;\n  }\n};\n\n/**\n * 发送下载消息到inject.ts\n * @param {any} messageData 参数\n * @return {*}  {void}\n */\nexport function sendMessageToInject(messageData: {\n  type: string;\n  video_url: string;\n  video_id: string;\n  page: string;\n  download_id: string;\n  fileName: string | null;\n  taskId: string;\n}): void {\n  console.info('content.js', 'sendMessageToInject', messageData);\n  window.parent.postMessage(messageData, '*');\n}\n\n/**\n * 等待元素加载\n */\nexport function waitForElements(\n  container: HTMLElement | Document,\n  selector: string,\n  timeout = 15000,\n): Promise<HTMLElement[]> {\n  return new Promise((resolve, reject) => {\n    // 将 NodeList 转换为数组\n    const target = Array.from(container.querySelectorAll(selector)) as HTMLElement[];\n    if (target.length > 0) return resolve(target);\n\n    const observer = new MutationObserver((mutations) => {\n      const updatedTarget = Array.from(container.querySelectorAll(selector)) as HTMLElement[];\n      if (updatedTarget.length > 0) {\n        observer.disconnect();\n        resolve(updatedTarget);\n      }\n    });\n\n    // 开始观察整个文档\n    observer.observe(container, {\n      childList: true,\n      subtree: true,\n    });\n\n    setTimeout(() => {\n      observer.disconnect();\n      reject(new Error(`元素 ${selector} 加载超时`));\n    }, timeout);\n  });\n};\n","import {\r\n  getHTMLElement,\r\n  getHTMLVideoElement,\r\n  generateUniqueId,\r\n  injectScript,\r\n  injectAnimationStyle,\r\n  initIframe,\r\n  createControlButton,\r\n  toggleIframe,\r\n  resizeIframe,\r\n  initLocalization,\r\n  initHtmlTemplate,\r\n  appendElement,\r\n  setElementStatus,\r\n  sendMessageToIframe,\r\n  waitForElement,\r\n  waitForElements,\r\n  waitForVideoSrcLoad,\r\n  sendMessageToInject,\r\n  getFileNameByClipBoard,\r\n} from './utils';\r\n/* 注入脚本 */\r\ninjectScript('js/inject.js');\r\nconst localizedText = initLocalization();\r\n/* 注入动画样式 */\r\ninjectAnimationStyle();\r\n/* 初始化iframe */\r\nconst iframe = initIframe('task-list-iframe', '../iframe/iframe.html');\r\nlet isVisible = false;\r\nlet isAnimating = false;\r\nlet isWide = false;\r\nconst identifier = 'content script';\r\n/* 添加控制按钮 */\r\nconst toggleBtn = createControlButton(localizedText.taskPanel);\r\ntoggleBtn.addEventListener('click', () => {\r\n  toggleIframe(iframe, toggleBtn, isVisible, isAnimating);\r\n  isVisible = !isVisible;\r\n});\r\n// ESC键关闭支持\r\ndocument.addEventListener('keydown', (e) => {\r\n  if (e.key === 'Escape' && isVisible) {\r\n    toggleIframe(iframe, toggleBtn, isVisible, isAnimating);\r\n    isVisible = !isVisible;\r\n  }\r\n});\r\n// 直接获取扩展ID\r\nconst extensionId = chrome.runtime.id;\r\n\r\nwindow.addEventListener('message', (event) => {\r\n  // 定义预期的扩展消息来源\r\n  const expectedOrigin = 'chrome-extension://' + extensionId;\r\n\r\n  // 验证消息的来源是否符合预期\r\n  if (event.origin !== expectedOrigin) return;\r\n\r\n  if (event.data.type === 'closeIframe') {\r\n    // 执行对应操作\r\n    toggleIframe(iframe, toggleBtn, isVisible, isAnimating);\r\n    isVisible = !isVisible;\r\n  }\r\n  if (event.data.type === 'fullScreenContainer') {\r\n    resizeIframe(iframe, toggleBtn, isWide);\r\n    isWide = !isWide;\r\n  }\r\n  if (event.data.type === 'downloadTask') {\r\n    sendMessageToInject(event.data.content);\r\n  }\r\n});\r\n\r\n\r\nconst htmlTemplate = initHtmlTemplate(\r\n  localizedText.butImg,\r\n  localizedText.butVideo,\r\n  localizedText.butAllFile,\r\n);\r\n/**\r\n * 处理视频下载函数handleVideoDownload的可选参数\r\n * @param mediaPhotoSrc 媒体图片的src\r\n * @param taskId 任务id\r\n */\r\ninterface handleVideoDownloadOptions {\r\n  mediaPhotoSrc?: string;\r\n  taskId?: string;\r\n}\r\n\r\n/**\r\n * 处理视频下载逻辑\r\n *\r\n * @param {string} mediaType 媒体类型\r\n * @param {string} videoUrl 视频URL\r\n * @param {string} pageUrl 页面URL\r\n * @param {string} downloadId 下载ID\r\n * @param {string} fileType 文件类型\r\n * @param {HTMLElement} messageBubble 容器元素\r\n * @param {HtmlTemplate} htmlTemplate HTML模板\r\n * @param {LocalizationData} localizedText 本地化文本\r\n * @param {handleVideoDownloadOptions} [options={}] 可选参数\r\n */\r\nconst handleVideoDownload = async (\r\n  mediaType: string,\r\n  videoUrl: string,\r\n  pageUrl: string,\r\n  downloadId: string,\r\n  fileType: string,\r\n  messageBubble: HTMLElement,\r\n  htmlTemplate: HtmlTemplates,\r\n  localizedText: LocalizationData,\r\n  options: handleVideoDownloadOptions = {},\r\n) => {\r\n  console.log(identifier, 'handleVideoDownload');\r\n  let lastRequestTime = 0;\r\n  const requestInterval = 500;\r\n  let currentTime = new Date().getTime();\r\n  console.log(identifier, 'currentTime', currentTime);\r\n  console.log(identifier, 'lastRequestTime', lastRequestTime);\r\n  console.log(identifier, 'requestInterval', requestInterval);\r\n  console.log(identifier, 'currentTime - lastRequestTime', currentTime - lastRequestTime);\r\n  if (currentTime - lastRequestTime < requestInterval) return;\r\n  lastRequestTime = currentTime;\r\n  let videoId = '';\r\n  console.log(identifier, 'fileType', fileType);\r\n  if (fileType === 'video') {\r\n    const streamIndex = videoUrl.indexOf('stream/') + 'stream/'.length;\r\n    const encodedVideoId = videoUrl.substring(streamIndex);\r\n    const decodedVideoId = decodeURIComponent(encodedVideoId);\r\n    const videoData = JSON.parse(decodedVideoId);\r\n    videoId = videoData.location.id;\r\n  }\r\n  console.log(identifier, 'videoId', videoId);\r\n\r\n  // 监听视频下载进度\r\n  document.addEventListener(videoId + 'video_download_progress', (event: any) => {\r\n    const progressElement = messageBubble.querySelector('.down_btn_progress') as HTMLElement;\r\n    const downloadButton = messageBubble.querySelector('.down_btn_video') as HTMLElement;\r\n    const checkAllDownloadButton = messageBubble.querySelector(\r\n      '.check-all-download',\r\n    ) as HTMLElement;\r\n\r\n    if (\r\n      event.detail.progress !== null &&\r\n      event.detail.progress !== '100' &&\r\n      messageBubble !== null\r\n    ) {\r\n      sendMessageToIframe(\r\n        'down_task_status',\r\n        event.detail.task_id,\r\n        'downloading',\r\n        event.detail.progress,\r\n      );\r\n      let progressValue: number | string = 0;\r\n\r\n      if (downloadButton !== null) {\r\n        downloadButton.style.display = 'none';\r\n        progressValue = event.detail.progress;\r\n      }\r\n\r\n      if (checkAllDownloadButton !== null) {\r\n        checkAllDownloadButton.style.display = 'none';\r\n        progressValue = Math.max(-1, parseInt(event.detail.progress));\r\n      }\r\n\r\n      if (progressElement === null) {\r\n        const progressContainerElement = document.createElement('div');\r\n        progressContainerElement.className = 'progress-teleram-script';\r\n        progressContainerElement.innerHTML = htmlTemplate.progressContainer.trim();\r\n        messageBubble.appendChild(progressContainerElement);\r\n      } else {\r\n        progressElement.style.display = 'block';\r\n        progressElement.innerHTML = `${localizedText.progressText} ${progressValue}%`;\r\n      }\r\n    } else {\r\n      if (downloadButton !== null) downloadButton.style.display = 'block';\r\n      if (checkAllDownloadButton !== null) checkAllDownloadButton.style.display = 'flex';\r\n      if (progressElement !== null) progressElement.style.display = 'none';\r\n    }\r\n    if (event.detail.progress === '100') {\r\n      sendMessageToIframe(\r\n        'down_task_status',\r\n        event.detail.task_id,\r\n        'completed',\r\n        event.detail.progress,\r\n      );\r\n      setElementStatus(event.detail.task_id, 'success');\r\n    }\r\n  });\r\n  console.log(identifier, 'options', options);\r\n  if (options?.taskId) {\r\n    const fileName = await getFileNameByClipBoard();\r\n    const downloadEventDetail = {\r\n      type: mediaType,\r\n      video_url: videoUrl,\r\n      video_id: videoId,\r\n      page: pageUrl,\r\n      download_id: downloadId,\r\n      fileName: fileName,\r\n      taskId: options.taskId,\r\n    };\r\n    sendMessageToInject(downloadEventDetail);\r\n    sendMessageToIframe(\r\n      'add_task',\r\n      options.taskId,\r\n      'pending',\r\n      options.mediaPhotoSrc,\r\n      downloadEventDetail,\r\n    );\r\n  } else {\r\n    console.log(`%c[${identifier}] : 缺少taskId`, `color: red;`);\r\n  }\r\n};\r\n\r\n/* 初始化下载按钮 */\r\nconst initializeDownloadButton = (\r\n  messageBubble: HTMLElement,\r\n  mediaElement: HTMLImageElement | HTMLVideoElement,\r\n  mediaType: string,\r\n  downloadIndex: number,\r\n  htmlTemplate: HtmlTemplates,\r\n  localizedText: LocalizationData,\r\n  mediaPhotoElement: HTMLImageElement | HTMLVideoElement,\r\n) => {\r\n  const downloadButton = getHTMLElement(messageBubble, '.down_btn_' + mediaType);\r\n  const parentElement = mediaElement.parentElement as HTMLElement;\r\n  console.log('parentElement', parentElement);\r\n  if (downloadButton && mediaElement) {\r\n    const statusWrapper = document.createElement('div');\r\n    statusWrapper.innerHTML = htmlTemplate.statusBoxInnerHTML.trim();\r\n    const statusBox = statusWrapper.querySelector('.status-box') as HTMLElement;\r\n    const id = generateUniqueId();\r\n    statusBox.id = id;\r\n    parentElement.appendChild(statusWrapper.firstChild as Node);\r\n    const pageUrl = window.location.href;\r\n    const hashIndex = pageUrl.indexOf('#');\r\n    pageUrl.substring(0, hashIndex);\r\n    downloadButton.addEventListener('click', (event) => {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      if (mediaType === 'video') {\r\n        handleVideoDownload(\r\n          'single',\r\n          mediaElement.src,\r\n          pageUrl,\r\n          String(downloadIndex + 1),\r\n          'video',\r\n          messageBubble,\r\n          htmlTemplate,\r\n          localizedText,\r\n          { mediaPhotoSrc: mediaPhotoElement?.src, taskId: id },\r\n        );\r\n      } else if (mediaType === 'img') {\r\n        handleVideoDownload(\r\n          'single',\r\n          mediaElement.src,\r\n          pageUrl,\r\n          String(downloadIndex + 1),\r\n          'image',\r\n          messageBubble,\r\n          htmlTemplate,\r\n          localizedText,\r\n          { mediaPhotoSrc: mediaPhotoElement?.src, taskId: id },\r\n        );\r\n      } else {\r\n        console.error('未支持的媒体类型:', mediaType);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n// 点击事件延时处理\r\nconst clickWithTimeout = (element: HTMLElement, timeout = 500) =>\r\n  new Promise((resolve, reject) => {\r\n    element.click();\r\n    setTimeout(resolve, timeout);\r\n  });\r\n\r\n// 处理相册媒体（优化版）\r\nconst processAlbumMedia = (\r\n  mediaElement: HTMLElement,\r\n  downloadIndex: string,\r\n  containerElement: HTMLElement,\r\n): Promise<void> => {\r\n  return new Promise<void>((resolve, reject) => {\r\n    (async () => {\r\n      try {\r\n        const parent = mediaElement.parentNode as HTMLElement;\r\n        const statusBox = parent.querySelector('.status-box');\r\n        const taskId = statusBox?.getAttribute('id') || undefined;\r\n        const albumMedia = getHTMLElement(parent, '.album-item-media') as HTMLElement;\r\n        const mediaPhotoSrc = albumMedia.querySelector('.media-photo')?.getAttribute('src') || '';\r\n        albumMedia.click();\r\n\r\n        const mediaViewerContainer = await waitForElement('.media-viewer-movers');\r\n        if (mediaViewerContainer instanceof Error) {\r\n          throw mediaViewerContainer;\r\n        }\r\n\r\n        // 获取视频元素\r\n        const videoElements = await waitForElements(\r\n          mediaViewerContainer,\r\n          '.media-viewer-aspecter video',\r\n        );\r\n        const videoElement = videoElements[0] as HTMLVideoElement;\r\n\r\n        // 等待有效视频源\r\n        const videoSrc = await waitForVideoSrcLoad(videoElement);\r\n        if (videoSrc instanceof Error) {\r\n          throw videoSrc;\r\n        }\r\n\r\n        // 处理不同视频源类型\r\n        if (videoSrc.includes('blob')) {\r\n          console.log(identifier, '检测到blob视频源');\r\n          const menuElements = await waitForElements(\r\n            document,\r\n            '.quality-download-options-button-menu',\r\n          );\r\n          const buttonMenu = menuElements[0] as HTMLElement;\r\n\r\n          // 增强版菜单点击（带重试机制）\r\n          const maxRetries = 3;\r\n          let retryCount = 0;\r\n\r\n          const clickMenuWithRetry = async (): Promise<void> => {\r\n            while (retryCount < maxRetries) {\r\n              try {\r\n                await clickWithTimeout(buttonMenu, 300);\r\n                console.log(identifier, `第 ${retryCount + 1} 次点击下载菜单`);\r\n\r\n                // 等待菜单项加载（带超时检测）\r\n                const menuItems = (await Promise.race([\r\n                  waitForElements(buttonMenu, '.btn-menu-item', 1000),\r\n                  new Promise<Element[]>((_, reject) =>\r\n                    setTimeout(() => reject(new Error('菜单项加载超时')), 1000),\r\n                  ),\r\n                ])) as Element[];\r\n\r\n                if (menuItems.length > 0) {\r\n                  await clickWithTimeout(menuItems[0] as HTMLElement, 100);\r\n                  console.log(identifier, '已选择下载选项');\r\n                  return; // 成功则退出循环\r\n                }\r\n              } catch (error) {\r\n                console.warn(`菜单操作失败（尝试 ${retryCount + 1}/${maxRetries}）:`, error);\r\n                retryCount++;\r\n\r\n                // 增加指数退避延迟\r\n                await new Promise((resolve) => setTimeout(resolve, 500 * Math.pow(2, retryCount)));\r\n              }\r\n            }\r\n            throw new Error(`连续 ${maxRetries} 次尝试打开菜单失败`);\r\n          };\r\n\r\n          await clickMenuWithRetry();\r\n        } else {\r\n          console.log(identifier, '检测到stream视频源，开始下载 handleVideoDownload');\r\n          handleVideoDownload(\r\n            'single',\r\n            videoSrc,\r\n            window.location.href,\r\n            downloadIndex + 1,\r\n            'video',\r\n            containerElement,\r\n            htmlTemplate,\r\n            localizedText,\r\n            { taskId, mediaPhotoSrc },\r\n          );\r\n        }\r\n\r\n        // 统一关闭查看器\r\n        const closeViewer = () => {\r\n          const topbar = document.querySelector('.media-viewer-topbar') as HTMLElement;\r\n          topbar?.click();\r\n          console.log(identifier, '已关闭视频查看器');\r\n        };\r\n\r\n        // 添加关闭超时保护\r\n        setTimeout(() => {\r\n          closeViewer();\r\n          resolve();\r\n        }, 500);\r\n      } catch (error) {\r\n        console.error('处理相册媒体时出错:', error);\r\n        reject(error);\r\n      } finally {\r\n        // 清理可能残留的查看器\r\n        const topbar = document.querySelector('.media-viewer-topbar') as HTMLElement;\r\n        topbar?.click();\r\n      }\r\n    })(); // 立即执行\r\n  });\r\n};\r\n\r\n\r\n\r\n/**\r\n * 初始化下载处理程序\r\n * @param {HtmlTemplate} htmlTemplate\r\n */\r\nconst initializeDownloadHandlers = (htmlTemplate: HtmlTemplates, localizedText: LocalizationData) => {\r\n  // 获取所有的消息气泡元素\r\n  const messageBubbles = document.querySelectorAll(\r\n    '.bubble-content-wrapper',\r\n  ) as NodeListOf<HTMLElement>;\r\n  console.log('messageBubbles', messageBubbles);\r\n\r\n  // 遍历每个消息气泡\r\n  messageBubbles.forEach((messageBubble, index) => {\r\n    // 查找消息气泡中的图片元素\r\n    const imageElement = messageBubble.querySelector('.media-photo') as HTMLImageElement;\r\n    // 查找消息气泡中的脚本内容\r\n    const scriptContent = messageBubble.querySelector('.content-teleram-script');\r\n    // 查找消息气泡中的视频元素\r\n    const videoElement = messageBubble.querySelector('.media-video') as HTMLVideoElement;\r\n    // 查找消息气泡中的相册项\r\n    const albumItems = messageBubble.querySelectorAll('.album-item') as NodeListOf<HTMLElement>;\r\n    // 查找消息气泡中的视频时长\r\n    const videoDuration = messageBubble.querySelector('.video-time') as HTMLElement;\r\n\r\n    // 如果没有脚本内容且没有相册项，并且存在图片元素\r\n    if (scriptContent === null && albumItems.length === 0 && imageElement !== null) {\r\n      // 如果存在视频元素和视频时长\r\n      if (videoElement !== null && videoDuration !== null) {\r\n        console.log('videoElement !== null && videoDuration !== null');\r\n        // 添加视频下载按钮并初始化下载按钮事件,单视频气泡,可直接下载\r\n        appendElement(messageBubble, 'video', htmlTemplate.videoDownloadButton, 'attachment', htmlTemplate);\r\n        initializeDownloadButton(messageBubble, videoElement, 'video', index, htmlTemplate, localizedText, imageElement);\r\n      }\r\n\r\n      // 如果存在视频时长但没有视频元素,单视频气泡,需要选择清晰度下载\r\n      if (videoDuration !== null && videoElement === null) {\r\n        console.log('videoDuration !== null && videoElement === null');\r\n        // 添加视频下载按钮\r\n        appendElement(messageBubble, 'video', htmlTemplate.videoDownloadButton, 'attachment', htmlTemplate);\r\n        const statusWrapper = document.createElement('div');\r\n        statusWrapper.innerHTML = htmlTemplate.statusBoxInnerHTML.trim();\r\n        const statusBox = statusWrapper.querySelector('.status-box') as HTMLElement;\r\n        const id = generateUniqueId();\r\n        statusBox.id = id;\r\n        messageBubble.querySelector('.media-container')?.appendChild(statusWrapper.firstChild as Node);\r\n\r\n        // 为视频下载按钮添加点击事件\r\n        const downBtnVideo = getHTMLElement(messageBubble, '.down_btn_video') as HTMLElement;\r\n        downBtnVideo?.addEventListener('click', (event) => {\r\n          console.log(identifier, 'messageBubble   click');\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n\r\n          // 模拟点击图片以打开视频查看器\r\n          const mediaPhoto = getHTMLElement(messageBubble, '.media-photo') as HTMLImageElement;\r\n          const mediaPhotoSrc = mediaPhoto.src;\r\n          mediaPhoto?.click();\r\n\r\n          setTimeout(() => {\r\n            // 获取媒体查看器容器\r\n            const mediaViewerContainer = getHTMLElement(\r\n              document,\r\n              '.media-viewer-movers',\r\n            ) as HTMLElement;\r\n            // 获取查看器中的视频元素\r\n            const videoInViewer = getHTMLVideoElement(\r\n              mediaViewerContainer,\r\n              '.media-viewer-aspecter video',\r\n            ) as HTMLVideoElement;\r\n            // 如果src包含blob，点击原生按钮下载\r\n            if (videoInViewer.src.includes('blob')) {\r\n              waitForElements(document, '.quality-download-options-button-menu').then(\r\n                (elements) => {\r\n                  setTimeout(() => {\r\n                    const buttonMenu = elements[0] as HTMLElement;\r\n                    buttonMenu.click();\r\n                    console.log(identifier, 'button-menu click');\r\n                    waitForElements(buttonMenu, '.btn-menu-item').then((elements) => {\r\n                      setTimeout(() => {\r\n                        elements[0]?.click();\r\n                        console.log(identifier, 'elements[0] click');\r\n                        setTimeout(() => {\r\n                          const topbar = getHTMLElement(\r\n                            document,\r\n                            '.media-viewer-topbar',\r\n                          ) as HTMLElement;\r\n                          topbar?.click();\r\n                          console.log(identifier, '关闭blob视频查看器');\r\n                        }, 500);\r\n                      }, 100);\r\n                    });\r\n                  }, 100);\r\n                },\r\n              );\r\n            } else {\r\n              // 处理视频下载\r\n              handleVideoDownload(\r\n                'single',\r\n                videoInViewer.src,\r\n                window.location.href,\r\n                String(index + 1),\r\n                'video',\r\n                messageBubble,\r\n                htmlTemplate,\r\n                localizedText,\r\n                { mediaPhotoSrc: mediaPhotoSrc, taskId: id },\r\n              );\r\n              // 关闭视频查看器\r\n              const topbar = getHTMLElement(document, '.media-viewer-topbar') as HTMLElement;\r\n              topbar?.click();\r\n            }\r\n          }, 800);\r\n        });\r\n      }\r\n\r\n      // 如果没有视频时长且没有视频元素\r\n      if (videoDuration === null && videoElement === null) {\r\n        // 添加图片下载按钮并初始化下载按钮事件\r\n        appendElement(messageBubble, 'img', htmlTemplate.imageDownloadButton, 'attachment', htmlTemplate);\r\n        initializeDownloadButton(messageBubble, imageElement, 'img', index, htmlTemplate, localizedText, imageElement);\r\n      }\r\n    }\r\n    // 如果没有脚本内容且没有相册项，并且不存在图片元素，没有缩略图\r\n    if (scriptContent === null && albumItems.length === 0 && videoDuration !== null && videoElement !== null && imageElement === null) {\r\n      appendElement(messageBubble, 'video', htmlTemplate.videoDownloadButton, 'attachment', htmlTemplate);\r\n      const img = document.createElement('img');\r\n      img.src = ''\r\n      initializeDownloadButton(messageBubble, videoElement, 'video', index, htmlTemplate, localizedText, img);\r\n    }\r\n\r\n    // 为每个相册项添加下载复选框\r\n    albumItems.forEach((albumItem) => {\r\n      const hasDownloadCheckbox = albumItem.querySelector('.download-check-item');\r\n      if (!hasDownloadCheckbox) {\r\n        appendElement(albumItem, 'check', htmlTemplate.downloadCheckbox, albumItem, htmlTemplate);\r\n      }\r\n    });\r\n\r\n    // 查找下载全部按钮\r\n    const allDownloadButton = messageBubble.querySelectorAll('.download-checkbox-all');\r\n\r\n    // 如果没有下载全部按钮且存在相册项\r\n    if (allDownloadButton.length === 0 && messageBubble.querySelector('.album-item') !== null) {\r\n      // 添加下载全部按钮\r\n      appendElement(messageBubble, 'downloadAll', htmlTemplate.allFilesDownloadButton, messageBubble, htmlTemplate);\r\n\r\n      // 为下载全部按钮添加点击事件\r\n      messageBubble.querySelectorAll('.download-checkbox-all').forEach((checkbox) => {\r\n        const parentContainer = checkbox.parentNode?.parentNode as HTMLElement;\r\n\r\n        checkbox.addEventListener('click', async (event) => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n\r\n          // 获取所有的单个下载复选框\r\n          const individualDownloadCheckboxes =\r\n            parentContainer.querySelectorAll('.download-check-item');\r\n          // 修复方案：将 NodeList 转换为数组\r\n          const checkboxesArray = Array.from(individualDownloadCheckboxes);\r\n\r\n          let downloadChain = Promise.resolve();\r\n\r\n          // 修改为异步reduce\r\n          downloadChain = checkboxesArray.reduce(async (chain, checkbox, itemIndex) => {\r\n            const checkboxInput = checkbox as HTMLInputElement;\r\n            if (!checkboxInput.checked) return chain;\r\n            await chain;\r\n\r\n            const videoTimeIndicator = checkboxInput.parentNode?.querySelector('.video-time');\r\n            if (videoTimeIndicator === null) {\r\n              const imageUrl = (\r\n                checkboxInput.parentNode?.querySelector('.media-photo') as HTMLImageElement\r\n              ).src;\r\n              const taskId = document.getElementById(checkboxInput.id)?.id;\r\n              handleVideoDownload(\r\n                'single',\r\n                imageUrl,\r\n                imageUrl,\r\n                String(itemIndex + 1),\r\n                'image',\r\n                messageBubble,\r\n                htmlTemplate,\r\n                localizedText,\r\n                { mediaPhotoSrc: imageUrl, taskId },\r\n              );\r\n            } else {\r\n              try {\r\n                await processAlbumMedia(checkboxInput, String(itemIndex + 1), messageBubble);\r\n              } catch (error) {\r\n                console.error(`相册项 ${itemIndex} 下载失败:`, error);\r\n              }\r\n            }\r\n          }, Promise.resolve());\r\n\r\n          // 添加最终状态处理\r\n          downloadChain\r\n            .then(() => console.log(identifier, '所有下载任务添加完成'))\r\n            .catch((finalError) => console.error('下载链意外终止:', finalError));\r\n        });\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\n// 定时初始化下载处理程序和处理媒体元素\r\nsetInterval(() => {\r\n  initializeDownloadHandlers(htmlTemplate, localizedText);\r\n}, 5000);      "],"names":["identifier","iframe","toggleBtn","isVisible","isAnimating","isWide","htmlTemplate","localizedText","reject","resolve","elements","_a","checkbox"],"mappings":"AAAO,MAAM,MAAM;AAAA,EACjB,MAAM,CAACA,aAAoB,YAAoB,SAAgB;AACrD,YAAA,IAAI,MAAMA,WAAU,OAAO,OAAO,IAAI,iBAAiB,GAAG,IAAI;AAAA,EACxE;AAAA,EACA,OAAO,CAACA,aAAoB,YAAoB,SAAgB;AACtD,YAAA,KAAK,MAAMA,WAAU,OAAO,OAAO,IAAI,eAAe,GAAG,IAAI;AAAA,EAAA;AAEzE;AAQgB,SAAA,eACd,eACA,UACoB;AAChB,MAAA;AAEI,UAAA,UAAU,cAAc,cAAc,QAAQ;AAGpD,QAAI,CAAC,SAAS;AACZ,YAAM,IAAI,MAAM,kBAAkB,QAAQ,GAAG;AAAA,IAAA;AAI3C,QAAA,EAAE,mBAAmB,cAAc;AACrC,YAAM,IAAI,MAAM,QAAQ,QAAQ,0BAA0B;AAAA,IAAA;AAGrD,WAAA;AAAA,WACA,OAAO;AACN,YAAA,MAAM,wBAAwB,KAAK;AACpC,WAAA;AAAA,EAAA;AAEX;AAQgB,SAAA,oBACd,eACA,UACyB;AACrB,MAAA;AACI,UAAA,UAAU,cAAc,cAAc,QAAQ;AAGpD,QAAI,CAAC,SAAS;AACZ,YAAM,IAAI,MAAM,kBAAkB,QAAQ,GAAG;AAAA,IAAA;AAI3C,QAAA,EAAE,mBAAmB,mBAAmB;AAC1C,YAAM,IAAI,MAAM,QAAQ,QAAQ,+BAA+B;AAAA,IAAA;AAG1D,WAAA;AAAA,WACA,OAAO;AACN,YAAA,MAAM,6BAA6B,KAAK;AACzC,WAAA;AAAA,EAAA;AAEX;AAiEO,SAAS,mBAA2B;AAEzC,MAAI,OAAO,WAAW,eAAe,OAAO,YAAY;AACtD,WAAO,OAAO,WAAW;AAAA,EAAA,OACpB;AAEL,UAAM,YAAY,KAAK,IAAI,EAAE,SAAS,EAAE;AAClC,UAAA,aAAa,KAAK,SAAS,SAAS,EAAE,EAAE,UAAU,GAAG,EAAE;AACtD,WAAA,GAAG,SAAS,IAAI,UAAU;AAAA,EAAA;AAErC;AAKO,SAAS,aAAa,UAAwB;AAC7C,QAAA,SAAS,SAAS,cAAc,QAAQ;AAC9C,SAAO,MAAM,OAAO,QAAQ,OAAO,QAAQ;AAClC,WAAA,KAAK,YAAY,MAAM;AAChC,SAAO,SAAS,MAAM;AACpB,WAAO,OAAO;AAAA,EAChB;AACF;AAKO,SAAS,uBAA6B;AACrC,QAAA,QAAQ,SAAS,cAAc,OAAO;AAC5C,QAAM,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeX,WAAA,KAAK,YAAY,KAAK;AACjC;AAQgB,SAAA,WAAW,IAAY,KAAgC;AAC/D,QAAAC,UAAS,SAAS,cAAc,QAAQ;AAC9C,EAAAA,QAAO,KAAK;AACZ,EAAAA,QAAO,MAAM,OAAO,QAAQ,OAAO,GAAG;AAC/B,SAAA,OAAOA,QAAO,OAAO;AAAA,IAC1B,UAAU;AAAA,IACV,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,cAAc;AAAA,IACd,WAAW;AAAA,IACX,SAAS;AAAA,IACT,SAAS;AAAA,EAAA,CACV;AACQ,WAAA,KAAK,YAAYA,OAAM;AACzB,SAAAA;AACT;AAOO,SAAS,oBAAoB,MAAiC;AAC7D,QAAAC,aAAY,SAAS,cAAc,QAAQ;AAC1C,SAAA,OAAOA,WAAU,OAAO;AAAA,IAC7B,UAAU;AAAA,IACV,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,SAAS;AAAA,IACT,iBAAiB;AAAA,IACjB,YAAY;AAAA,IACZ,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,QAAQ;AAAA,EAAA,CACT;AACD,EAAAA,WAAU,cAAc;AACf,WAAA,KAAK,YAAYA,UAAS;AAC5B,SAAAA;AACT;AAWO,SAAS,aACdD,SACAC,YACAC,YACAC,cACM;AACN,MAAIA,aAAa;AAEjB,MAAID,YAAW;AACN,IAAAF,QAAA,UAAU,IAAI,WAAW;AAChC,IAAAC,WAAU,cAAc;AAAA,EAAA,OACnB;AACL,IAAAD,QAAO,MAAM,UAAU;AAChB,IAAAA,QAAA,UAAU,IAAI,UAAU;AAC/B,IAAAC,WAAU,cAAc;AAAA,EAAA;AAGnB,EAAAD,QAAA;AAAA,IACL;AAAA,IACA,MAAM;AACJ,MAAAA,QAAO,UAAU,OAAOE,aAAY,cAAc,UAAU;AAC5D,UAAIA,YAAW;AACb,QAAAF,QAAO,MAAM,UAAU;AAAA,MAAA;AAEzB,MAAAE,aAAY,CAACA;AACC,MAAAC,eAAA;AAAA,IAChB;AAAA,IACA,EAAE,MAAM,KAAK;AAAA,EACf;AACF;AASgB,SAAA,aAAaH,SAA2B,WAA8BI,SAAuB;AAC3G,MAAIA,SAAQ;AACV,IAAAJ,QAAO,MAAM,QAAQ;AACrB,cAAU,cAAc;AAAA,EAAA,OACnB;AACC,UAAA,eAAe,SAAS,eAAe,eAAe;AAC5D,QAAI,cAAc;AACT,MAAAA,QAAA,MAAM,QAAQ,aAAa,cAAc;AAChD,gBAAU,cAAc;AAAA,IAAA;AAAA,EAC1B;AAEF,EAAAI,UAAS,CAACA;AACZ;AAeO,SAAS,mBAAqC;AAEnD,MAAI,WAAW;AAEf,QAAM,OAAO;AAAA,IACX,IAAI;AAAA,MACF,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,WAAW;AAAA,IACb;AAAA,IACA,IAAI;AAAA,MACF,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,WAAW;AAAA,IAAA;AAAA,EAEf;AAGA,QAAM,eAAe,UAAU;AAC/B,MAAI,cAAc;AACL,eAAA;AAAA,EAAA;AAIN,SAAA,SAAS,SAAS,IAAI,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI;AACzD;AAegB,SAAA,iBAAiB,QAAgB,UAAkB,YAAmC;AAEpG,QAAM,sBAAsB;AAAA;AAAA;AAAA;AAAA,SAIrB,MAAM;AAAA;AAAA;AAAA;AAAA;AAMb,QAAM,sBAAsB;AAAA;AAAA;AAAA;AAAA,SAIrB,QAAQ;AAAA;AAAA;AAAA;AAAA;AAMf,QAAM,oBAAoB;AAAA;AAAA;AAI1B,QAAM,mBACJ;AAEF,QAAM,yBAAyB;AAAA;AAAA;AAAA,SAGxB,UAAU;AAAA;AAAA;AAAA;AAKjB,QAAM,qBAAqB;AACpB,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAiBO,SAAS,cACd,eACA,YACA,YACA,eACAC,eACM;AACE,UAAA,IAAI,iBAAiB,aAAa;AAE1C,MAAI,cAAc,cAAc,aAAa,UAAU,EAAE,EAAG;AAEtD,QAAA,YAAyB,kBAAkB,eAAe,gBAAgB;AAG1E,QAAA,aAAa,SAAS,cAAc,KAAK;AACpC,aAAA,YAAY,GAAG,UAAU;AACzB,aAAA,YAAY,WAAW,KAAK;AAG7B,YAAA,YAAY,WAAW,UAAkB;AAG7C,QAAA,WAAW,UAAU,cAAc,sBAAsB;AAC/D,MAAI,UAAU;AACH,aAAA,aAAa,MAAM,kBAAkB;AACxC,UAAA,gBAAgB,SAAS,cAAc,KAAK;AACpC,kBAAA,YAAY,GAAG,UAAU;AACzB,kBAAA,YAAYA,cAAa,mBAAmB,KAAK;AACzD,UAAA,YAAY,cAAc,cAAc,aAAa;AAC3D,cAAU,KAAK,iBAAiB;AACtB,cAAA,YAAY,cAAc,UAAkB;AAAA,EAAA;AAE1D;AAQgB,SAAA,iBAAiB,IAAY,QAAsB;AAC3D,QAAA,yBAAyB,SAAS,eAAe,EAAE;AACnD,QAAA,gBAAgB,eAAe,wBAAwB,kBAAkB;AAC/E,MAAI,wBAAwB;AAC1B,YAAQ,QAAQ;AAAA,MACd,KAAK;AACW,sBAAA,aAAa,SAAS,gCAAgC;AACpE;AAAA,MACF,KAAK;AACW,sBAAA,aAAa,SAAS,8BAA8B;AAClE;AAAA,IAAA;AAAA,EACJ;AAEJ;AAUO,SAAS,oBACd,MACA,IACA,QACA,MACA,SAAc,IACd;AACA,MAAI,KAAK,cAAc,uBAAuB,MAAM,IAAI,QAAQ,MAAM,MAAM;AAC5E,MAAI,CAAC,GAAI;AACH,QAAAL,UAAS,SAAS,eAAe,kBAAkB;AACzD,MAAIA,WAAA,gBAAAA,QAAQ,eAAe;AAClB,IAAAA,QAAA,cAAc,YAAY,EAAE,MAAM,IAAI,QAAQ,MAAM,OAAO,GAAG,GAAG;AAAA,EAAA;AAE5E;AAKgB,SAAA,eAAe,UAAkB,UAAU,MAAqC;AAC9F,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEhC,UAAA,SAAS,SAAS,cAAc,QAAQ;AAC1C,QAAA,OAAe,QAAA,QAAQ,MAAM;AAGjC,UAAM,WAAW,IAAI,iBAAiB,CAAC,cAAc;AAC7C,YAAA,gBAAgB,SAAS,cAAc,QAAQ;AACrD,UAAI,eAAe;AACjB,iBAAS,WAAW;AACpB,gBAAQ,aAAa;AAAA,MAAA;AAAA,IACvB,CACD;AAGQ,aAAA,QAAQ,SAAS,MAAM;AAAA,MAC9B,WAAW;AAAA,MACX,SAAS;AAAA,IAAA,CACV;AAED,eAAW,MAAM;AACf,eAAS,WAAW;AACpB,aAAO,IAAI,MAAM,MAAM,QAAQ,OAAO,CAAC;AAAA,OACtC,OAAO;AAAA,EAAA,CACX;AACH;AAKgB,SAAA,oBACd,cACA,WAAW,KACc;AACzB,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,QAAI,CAAC,aAAc,QAAO,OAAO,IAAI,MAAM,SAAS,CAAC;AAE/C,UAAA,WAAW,YAAY,MAAM;AAC7B,UAAA,aAAa,IAAI,SAAS,MAAM,KAAK,aAAa,IAAI,SAAS,QAAQ,GAAG;AAC5E,sBAAc,QAAQ;AACtB,qBAAa,OAAO;AACpB,gBAAQ,aAAa,GAAG;AAAA,MAAA;AAAA,OAEzB,QAAQ;AAGL,UAAA,UAAU,WAAW,MAAM;AAC/B,oBAAc,QAAQ;AACf,aAAA,IAAI,MAAM,SAAS,CAAC;AAAA,OAC1B,GAAK;AAAA,EAAA,CACT;AACH;AAMA,eAAsB,yBAAiD;AACjE,MAAA;AACF,UAAM,gBAAgB,MAAM,UAAU,UAAU,SAAS;AAClD,WAAA;AAAA,WACA,OAAO;AACP,WAAA;AAAA,EAAA;AAEX;AAOO,SAAS,oBAAoB,aAQ3B;AACC,UAAA,KAAK,cAAc,uBAAuB,WAAW;AACtD,SAAA,OAAO,YAAY,aAAa,GAAG;AAC5C;AAKO,SAAS,gBACd,WACA,UACA,UAAU,MACc;AACxB,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEtC,UAAM,SAAS,MAAM,KAAK,UAAU,iBAAiB,QAAQ,CAAC;AAC9D,QAAI,OAAO,SAAS,EAAG,QAAO,QAAQ,MAAM;AAE5C,UAAM,WAAW,IAAI,iBAAiB,CAAC,cAAc;AACnD,YAAM,gBAAgB,MAAM,KAAK,UAAU,iBAAiB,QAAQ,CAAC;AACjE,UAAA,cAAc,SAAS,GAAG;AAC5B,iBAAS,WAAW;AACpB,gBAAQ,aAAa;AAAA,MAAA;AAAA,IACvB,CACD;AAGD,aAAS,QAAQ,WAAW;AAAA,MAC1B,WAAW;AAAA,MACX,SAAS;AAAA,IAAA,CACV;AAED,eAAW,MAAM;AACf,eAAS,WAAW;AACpB,aAAO,IAAI,MAAM,MAAM,QAAQ,OAAO,CAAC;AAAA,OACtC,OAAO;AAAA,EAAA,CACX;AACH;AC/kBA,aAAa,cAAc;AAC3B,MAAM,gBAAgB,iBAAiB;AAEvC,qBAAqB;AAErB,MAAM,SAAS,WAAW,oBAAoB,uBAAuB;AACrE,IAAI,YAAY;AAChB,IAAI,cAAc;AAClB,IAAI,SAAS;AACb,MAAM,aAAa;AAEnB,MAAM,YAAY,oBAAoB,cAAc,SAAS;AAC7D,UAAU,iBAAiB,SAAS,MAAM;AAC3B,eAAA,QAAQ,WAAW,WAAW,WAAW;AACtD,cAAY,CAAC;AACf,CAAC;AAED,SAAS,iBAAiB,WAAW,CAAC,MAAM;AACtC,MAAA,EAAE,QAAQ,YAAY,WAAW;AACtB,iBAAA,QAAQ,WAAW,WAAW,WAAW;AACtD,gBAAY,CAAC;AAAA,EAAA;AAEjB,CAAC;AAED,MAAM,cAAc,OAAO,QAAQ;AAEnC,OAAO,iBAAiB,WAAW,CAAC,UAAU;AAE5C,QAAM,iBAAiB,wBAAwB;AAG3C,MAAA,MAAM,WAAW,eAAgB;AAEjC,MAAA,MAAM,KAAK,SAAS,eAAe;AAExB,iBAAA,QAAQ,WAAW,WAAW,WAAW;AACtD,gBAAY,CAAC;AAAA,EAAA;AAEX,MAAA,MAAM,KAAK,SAAS,uBAAuB;AAChC,iBAAA,QAAQ,WAAW,MAAM;AACtC,aAAS,CAAC;AAAA,EAAA;AAER,MAAA,MAAM,KAAK,SAAS,gBAAgB;AAClB,wBAAA,MAAM,KAAK,OAAO;AAAA,EAAA;AAE1C,CAAC;AAGD,MAAM,eAAe;AAAA,EACnB,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAChB;AAwBA,MAAM,sBAAsB,OAC1B,WACA,UACA,SACA,YACA,UACA,eACAK,eACAC,gBACA,UAAsC,CAAA,MACnC;AACK,UAAA,IAAI,YAAY,qBAAqB;AAC7C,MAAI,kBAAkB;AACtB,QAAM,kBAAkB;AACxB,MAAI,eAAc,oBAAI,KAAK,GAAE,QAAQ;AAC7B,UAAA,IAAI,YAAY,eAAe,WAAW;AAC1C,UAAA,IAAI,YAAY,mBAAmB,eAAe;AAClD,UAAA,IAAI,YAAY,mBAAmB,eAAe;AAC1D,UAAQ,IAAI,YAAY,iCAAiC,cAAc,eAAe;AAClF,MAAA,cAAc,kBAAkB,gBAAiB;AACnC,oBAAA;AAClB,MAAI,UAAU;AACN,UAAA,IAAI,YAAY,YAAY,QAAQ;AAC5C,MAAI,aAAa,SAAS;AACxB,UAAM,cAAc,SAAS,QAAQ,SAAS,IAAI,UAAU;AACtD,UAAA,iBAAiB,SAAS,UAAU,WAAW;AAC/C,UAAA,iBAAiB,mBAAmB,cAAc;AAClD,UAAA,YAAY,KAAK,MAAM,cAAc;AAC3C,cAAU,UAAU,SAAS;AAAA,EAAA;AAEvB,UAAA,IAAI,YAAY,WAAW,OAAO;AAG1C,WAAS,iBAAiB,UAAU,2BAA2B,CAAC,UAAe;AACvE,UAAA,kBAAkB,cAAc,cAAc,oBAAoB;AAClE,UAAA,iBAAiB,cAAc,cAAc,iBAAiB;AACpE,UAAM,yBAAyB,cAAc;AAAA,MAC3C;AAAA,IACF;AAGE,QAAA,MAAM,OAAO,aAAa,QAC1B,MAAM,OAAO,aAAa,SAC1B,kBAAkB,MAClB;AACA;AAAA,QACE;AAAA,QACA,MAAM,OAAO;AAAA,QACb;AAAA,QACA,MAAM,OAAO;AAAA,MACf;AACA,UAAI,gBAAiC;AAErC,UAAI,mBAAmB,MAAM;AAC3B,uBAAe,MAAM,UAAU;AAC/B,wBAAgB,MAAM,OAAO;AAAA,MAAA;AAG/B,UAAI,2BAA2B,MAAM;AACnC,+BAAuB,MAAM,UAAU;AACvC,wBAAgB,KAAK,IAAI,IAAI,SAAS,MAAM,OAAO,QAAQ,CAAC;AAAA,MAAA;AAG9D,UAAI,oBAAoB,MAAM;AACtB,cAAA,2BAA2B,SAAS,cAAc,KAAK;AAC7D,iCAAyB,YAAY;AACZ,iCAAA,YAAYD,cAAa,kBAAkB,KAAK;AACzE,sBAAc,YAAY,wBAAwB;AAAA,MAAA,OAC7C;AACL,wBAAgB,MAAM,UAAU;AAChC,wBAAgB,YAAY,GAAGC,eAAc,YAAY,IAAI,aAAa;AAAA,MAAA;AAAA,IAC5E,OACK;AACL,UAAI,mBAAmB,KAAqB,gBAAA,MAAM,UAAU;AAC5D,UAAI,2BAA2B,KAA6B,wBAAA,MAAM,UAAU;AAC5E,UAAI,oBAAoB,KAAsB,iBAAA,MAAM,UAAU;AAAA,IAAA;AAE5D,QAAA,MAAM,OAAO,aAAa,OAAO;AACnC;AAAA,QACE;AAAA,QACA,MAAM,OAAO;AAAA,QACb;AAAA,QACA,MAAM,OAAO;AAAA,MACf;AACiB,uBAAA,MAAM,OAAO,SAAS,SAAS;AAAA,IAAA;AAAA,EAClD,CACD;AACO,UAAA,IAAI,YAAY,WAAW,OAAO;AAC1C,MAAI,mCAAS,QAAQ;AACb,UAAA,WAAW,MAAM,uBAAuB;AAC9C,UAAM,sBAAsB;AAAA,MAC1B,MAAM;AAAA,MACN,WAAW;AAAA,MACX,UAAU;AAAA,MACV,MAAM;AAAA,MACN,aAAa;AAAA,MACb;AAAA,MACA,QAAQ,QAAQ;AAAA,IAClB;AACA,wBAAoB,mBAAmB;AACvC;AAAA,MACE;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,IACF;AAAA,EAAA,OACK;AACL,YAAQ,IAAI,MAAM,UAAU,gBAAgB,aAAa;AAAA,EAAA;AAE7D;AAGA,MAAM,2BAA2B,CAC/B,eACA,cACA,WACA,eACAD,eACAC,gBACA,sBACG;AACH,QAAM,iBAAiB,eAAe,eAAe,eAAe,SAAS;AAC7E,QAAM,gBAAgB,aAAa;AAC3B,UAAA,IAAI,iBAAiB,aAAa;AAC1C,MAAI,kBAAkB,cAAc;AAC5B,UAAA,gBAAgB,SAAS,cAAc,KAAK;AACpC,kBAAA,YAAYD,cAAa,mBAAmB,KAAK;AACzD,UAAA,YAAY,cAAc,cAAc,aAAa;AAC3D,UAAM,KAAK,iBAAiB;AAC5B,cAAU,KAAK;AACD,kBAAA,YAAY,cAAc,UAAkB;AACpD,UAAA,UAAU,OAAO,SAAS;AAC1B,UAAA,YAAY,QAAQ,QAAQ,GAAG;AAC7B,YAAA,UAAU,GAAG,SAAS;AACf,mBAAA,iBAAiB,SAAS,CAAC,UAAU;AAClD,YAAM,eAAe;AACrB,YAAM,gBAAgB;AACtB,UAAI,cAAc,SAAS;AACzB;AAAA,UACE;AAAA,UACA,aAAa;AAAA,UACb;AAAA,UACA,OAAO,gBAAgB,CAAC;AAAA,UACxB;AAAA,UACA;AAAA,UACAA;AAAAA,UACAC;AAAAA,UACA,EAAE,eAAe,uDAAmB,KAAK,QAAQ,GAAG;AAAA,QACtD;AAAA,MAAA,WACS,cAAc,OAAO;AAC9B;AAAA,UACE;AAAA,UACA,aAAa;AAAA,UACb;AAAA,UACA,OAAO,gBAAgB,CAAC;AAAA,UACxB;AAAA,UACA;AAAA,UACAD;AAAAA,UACAC;AAAAA,UACA,EAAE,eAAe,uDAAmB,KAAK,QAAQ,GAAG;AAAA,QACtD;AAAA,MAAA,OACK;AACG,gBAAA,MAAM,aAAa,SAAS;AAAA,MAAA;AAAA,IACtC,CACD;AAAA,EAAA;AAEL;AAGA,MAAM,mBAAmB,CAAC,SAAsB,UAAU,QACxD,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC/B,UAAQ,MAAM;AACd,aAAW,SAAS,OAAO;AAC7B,CAAC;AAGH,MAAM,oBAAoB,CACxB,cACA,eACA,qBACkB;AAClB,SAAO,IAAI,QAAc,CAAC,SAAS,WAAW;AAC5C,KAAC,YAAY;ADzRV;AC0RG,UAAA;AACF,cAAM,SAAS,aAAa;AACtB,cAAA,YAAY,OAAO,cAAc,aAAa;AACpD,cAAM,UAAS,uCAAW,aAAa,UAAS;AAC1C,cAAA,aAAa,eAAe,QAAQ,mBAAmB;AAC7D,cAAM,kBAAgB,gBAAW,cAAc,cAAc,MAAvC,mBAA0C,aAAa,WAAU;AACvF,mBAAW,MAAM;AAEX,cAAA,uBAAuB,MAAM,eAAe,sBAAsB;AACxE,YAAI,gCAAgC,OAAO;AACnC,gBAAA;AAAA,QAAA;AAIR,cAAM,gBAAgB,MAAM;AAAA,UAC1B;AAAA,UACA;AAAA,QACF;AACM,cAAA,eAAe,cAAc,CAAC;AAG9B,cAAA,WAAW,MAAM,oBAAoB,YAAY;AACvD,YAAI,oBAAoB,OAAO;AACvB,gBAAA;AAAA,QAAA;AAIJ,YAAA,SAAS,SAAS,MAAM,GAAG;AACrB,kBAAA,IAAI,YAAY,YAAY;AACpC,gBAAM,eAAe,MAAM;AAAA,YACzB;AAAA,YACA;AAAA,UACF;AACM,gBAAA,aAAa,aAAa,CAAC;AAGjC,gBAAM,aAAa;AACnB,cAAI,aAAa;AAEjB,gBAAM,qBAAqB,YAA2B;AACpD,mBAAO,aAAa,YAAY;AAC1B,kBAAA;AACI,sBAAA,iBAAiB,YAAY,GAAG;AACtC,wBAAQ,IAAI,YAAY,KAAK,aAAa,CAAC,UAAU;AAG/C,sBAAA,YAAa,MAAM,QAAQ,KAAK;AAAA,kBACpC,gBAAgB,YAAY,kBAAkB,GAAI;AAAA,kBAClD,IAAI;AAAA,oBAAmB,CAAC,GAAGC,YACzB,WAAW,MAAMA,QAAO,IAAI,MAAM,SAAS,CAAC,GAAG,GAAI;AAAA,kBAAA;AAAA,gBACrD,CACD;AAEG,oBAAA,UAAU,SAAS,GAAG;AACxB,wBAAM,iBAAiB,UAAU,CAAC,GAAkB,GAAG;AAC/C,0BAAA,IAAI,YAAY,SAAS;AACjC;AAAA,gBAAA;AAAA,uBAEK,OAAO;AACd,wBAAQ,KAAK,aAAa,aAAa,CAAC,IAAI,UAAU,MAAM,KAAK;AACjE;AAGA,sBAAM,IAAI,QAAQ,CAACC,aAAY,WAAWA,UAAS,MAAM,KAAK,IAAI,GAAG,UAAU,CAAC,CAAC;AAAA,cAAA;AAAA,YACnF;AAEF,kBAAM,IAAI,MAAM,MAAM,UAAU,YAAY;AAAA,UAC9C;AAEA,gBAAM,mBAAmB;AAAA,QAAA,OACpB;AACG,kBAAA,IAAI,YAAY,uCAAuC;AAC/D;AAAA,YACE;AAAA,YACA;AAAA,YACA,OAAO,SAAS;AAAA,YAChB,gBAAgB;AAAA,YAChB;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA,EAAE,QAAQ,cAAc;AAAA,UAC1B;AAAA,QAAA;AAIF,cAAM,cAAc,MAAM;AAClB,gBAAA,SAAS,SAAS,cAAc,sBAAsB;AAC5D,2CAAQ;AACA,kBAAA,IAAI,YAAY,UAAU;AAAA,QACpC;AAGA,mBAAW,MAAM;AACH,sBAAA;AACJ,kBAAA;AAAA,WACP,GAAG;AAAA,eACC,OAAO;AACN,gBAAA,MAAM,cAAc,KAAK;AACjC,eAAO,KAAK;AAAA,MAAA,UACZ;AAEM,cAAA,SAAS,SAAS,cAAc,sBAAsB;AAC5D,yCAAQ;AAAA,MAAM;AAAA,IAChB,GACC;AAAA,EAAA,CACJ;AACH;AAQA,MAAM,6BAA6B,CAACH,eAA6BC,mBAAoC;AAEnG,QAAM,iBAAiB,SAAS;AAAA,IAC9B;AAAA,EACF;AACQ,UAAA,IAAI,kBAAkB,cAAc;AAG7B,iBAAA,QAAQ,CAAC,eAAe,UAAU;ADrZ5C;ACuZG,UAAA,eAAe,cAAc,cAAc,cAAc;AAEzD,UAAA,gBAAgB,cAAc,cAAc,yBAAyB;AAErE,UAAA,eAAe,cAAc,cAAc,cAAc;AAEzD,UAAA,aAAa,cAAc,iBAAiB,aAAa;AAEzD,UAAA,gBAAgB,cAAc,cAAc,aAAa;AAG/D,QAAI,kBAAkB,QAAQ,WAAW,WAAW,KAAK,iBAAiB,MAAM;AAE1E,UAAA,iBAAiB,QAAQ,kBAAkB,MAAM;AACnD,gBAAQ,IAAI,iDAAiD;AAE7D,sBAAc,eAAe,SAASD,cAAa,qBAAqB,cAAcA,aAAY;AAClG,iCAAyB,eAAe,cAAc,SAAS,OAAOA,eAAcC,gBAAe,YAAY;AAAA,MAAA;AAI7G,UAAA,kBAAkB,QAAQ,iBAAiB,MAAM;AACnD,gBAAQ,IAAI,iDAAiD;AAE7D,sBAAc,eAAe,SAASD,cAAa,qBAAqB,cAAcA,aAAY;AAC5F,cAAA,gBAAgB,SAAS,cAAc,KAAK;AACpC,sBAAA,YAAYA,cAAa,mBAAmB,KAAK;AACzD,cAAA,YAAY,cAAc,cAAc,aAAa;AAC3D,cAAM,KAAK,iBAAiB;AAC5B,kBAAU,KAAK;AACf,4BAAc,cAAc,kBAAkB,MAA9C,mBAAiD,YAAY,cAAc;AAGrE,cAAA,eAAe,eAAe,eAAe,iBAAiB;AACtD,qDAAA,iBAAiB,SAAS,CAAC,UAAU;AACzC,kBAAA,IAAI,YAAY,uBAAuB;AAC/C,gBAAM,eAAe;AACrB,gBAAM,gBAAgB;AAGhB,gBAAA,aAAa,eAAe,eAAe,cAAc;AAC/D,gBAAM,gBAAgB,WAAW;AACjC,mDAAY;AAEZ,qBAAW,MAAM;AAEf,kBAAM,uBAAuB;AAAA,cAC3B;AAAA,cACA;AAAA,YACF;AAEA,kBAAM,gBAAgB;AAAA,cACpB;AAAA,cACA;AAAA,YACF;AAEA,gBAAI,cAAc,IAAI,SAAS,MAAM,GAAG;AACtB,8BAAA,UAAU,uCAAuC,EAAE;AAAA,gBACjE,CAAC,aAAa;AACZ,6BAAW,MAAM;AACT,0BAAA,aAAa,SAAS,CAAC;AAC7B,+BAAW,MAAM;AACT,4BAAA,IAAI,YAAY,mBAAmB;AAC3C,oCAAgB,YAAY,gBAAgB,EAAE,KAAK,CAACI,cAAa;AAC/D,iCAAW,MAAM;ADvdhC,4BAAAC;ACwdiBD,yBAAAA,MAAAA,UAAS,CAAC,MAAVA,gBAAAA,IAAa;AACL,gCAAA,IAAI,YAAY,mBAAmB;AAC3C,mCAAW,MAAM;AACf,gCAAM,SAAS;AAAA,4BACb;AAAA,4BACA;AAAA,0BACF;AACA,2DAAQ;AACA,kCAAA,IAAI,YAAY,aAAa;AAAA,2BACpC,GAAG;AAAA,yBACL,GAAG;AAAA,oBAAA,CACP;AAAA,qBACA,GAAG;AAAA,gBAAA;AAAA,cAEV;AAAA,YAAA,OACK;AAEL;AAAA,gBACE;AAAA,gBACA,cAAc;AAAA,gBACd,OAAO,SAAS;AAAA,gBAChB,OAAO,QAAQ,CAAC;AAAA,gBAChB;AAAA,gBACA;AAAA,gBACAJ;AAAAA,gBACAC;AAAAA,gBACA,EAAE,eAA8B,QAAQ,GAAG;AAAA,cAC7C;AAEM,oBAAA,SAAS,eAAe,UAAU,sBAAsB;AAC9D,+CAAQ;AAAA,YAAM;AAAA,aAEf,GAAG;AAAA,QAAA;AAAA,MACP;AAIC,UAAA,kBAAkB,QAAQ,iBAAiB,MAAM;AAEnD,sBAAc,eAAe,OAAOD,cAAa,qBAAqB,cAAcA,aAAY;AAChG,iCAAyB,eAAe,cAAc,OAAO,OAAOA,eAAcC,gBAAe,YAAY;AAAA,MAAA;AAAA,IAC/G;AAGE,QAAA,kBAAkB,QAAQ,WAAW,WAAW,KAAK,kBAAkB,QAAQ,iBAAiB,QAAQ,iBAAiB,MAAM;AACjI,oBAAc,eAAe,SAASD,cAAa,qBAAqB,cAAcA,aAAY;AAC5F,YAAA,MAAM,SAAS,cAAc,KAAK;AACxC,UAAI,MAAM;AACV,+BAAyB,eAAe,cAAc,SAAS,OAAOA,eAAcC,gBAAe,GAAG;AAAA,IAAA;AAI7F,eAAA,QAAQ,CAAC,cAAc;AAC1B,YAAA,sBAAsB,UAAU,cAAc,sBAAsB;AAC1E,UAAI,CAAC,qBAAqB;AACxB,sBAAc,WAAW,SAASD,cAAa,kBAAkB,WAAWA,aAAY;AAAA,MAAA;AAAA,IAC1F,CACD;AAGK,UAAA,oBAAoB,cAAc,iBAAiB,wBAAwB;AAGjF,QAAI,kBAAkB,WAAW,KAAK,cAAc,cAAc,aAAa,MAAM,MAAM;AAEzF,oBAAc,eAAe,eAAeA,cAAa,wBAAwB,eAAeA,aAAY;AAG5G,oBAAc,iBAAiB,wBAAwB,EAAE,QAAQ,CAAC,aAAa;AD5hB9E,YAAAK;AC6hBO,cAAA,mBAAkBA,MAAA,SAAS,eAAT,gBAAAA,IAAqB;AAEpC,iBAAA,iBAAiB,SAAS,OAAO,UAAU;AAClD,gBAAM,eAAe;AACrB,gBAAM,gBAAgB;AAGhB,gBAAA,+BACJ,gBAAgB,iBAAiB,sBAAsB;AAEnD,gBAAA,kBAAkB,MAAM,KAAK,4BAA4B;AAE3D,cAAA,gBAAgB,QAAQ,QAAQ;AAGpC,0BAAgB,gBAAgB,OAAO,OAAO,OAAOC,WAAU,cAAc;AD5iBhF,gBAAAD,KAAA;AC6iBK,kBAAM,gBAAgBC;AAClB,gBAAA,CAAC,cAAc,QAAgB,QAAA;AAC7B,kBAAA;AAEN,kBAAM,sBAAqBD,MAAA,cAAc,eAAd,gBAAAA,IAA0B,cAAc;AACnE,gBAAI,uBAAuB,MAAM;AAC/B,oBAAM,aACJ,mBAAc,eAAd,mBAA0B,cAAc,iBACxC;AACF,oBAAM,UAAS,cAAS,eAAe,cAAc,EAAE,MAAxC,mBAA2C;AAC1D;AAAA,gBACE;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA,OAAO,YAAY,CAAC;AAAA,gBACpB;AAAA,gBACA;AAAA,gBACAL;AAAAA,gBACAC;AAAAA,gBACA,EAAE,eAAe,UAAU,OAAO;AAAA,cACpC;AAAA,YAAA,OACK;AACD,kBAAA;AACF,sBAAM,kBAAkB,eAAe,OAAO,YAAY,CAAC,GAAG,aAAa;AAAA,uBACpE,OAAO;AACd,wBAAQ,MAAM,OAAO,SAAS,UAAU,KAAK;AAAA,cAAA;AAAA,YAC/C;AAAA,UACF,GACC,QAAQ,SAAS;AAGpB,wBACG,KAAK,MAAM,QAAQ,IAAI,YAAY,YAAY,CAAC,EAChD,MAAM,CAAC,eAAe,QAAQ,MAAM,YAAY,UAAU,CAAC;AAAA,QAAA,CAC/D;AAAA,MAAA,CACF;AAAA,IAAA;AAAA,EACH,CACD;AACH;AAGA,YAAY,MAAM;AAChB,6BAA2B,cAAc,aAAa;AACxD,GAAG,GAAI;"}