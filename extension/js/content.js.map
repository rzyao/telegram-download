{"version":3,"file":"content.js","sources":["../../src/utils.ts","../../src/content.ts"],"sourcesContent":["/**\n * 根据选择器获取 HTMLElement 元素\n * @param parentElement 父容器，可以是 HTMLElement 或 Document\n * @param selector CSS 选择器字符串\n * @returns 找到的 HTMLElement，如果出现异常则返回 null\n */\nexport function getHTMLElement(parentElement: HTMLElement | Document, selector: string): HTMLElement | null {\n  try {\n    // 使用 querySelector 查找元素\n    const element = parentElement.querySelector(selector);\n\n    // 如果没有找到，抛出异常\n    if (!element) {\n      throw new Error(`未找到匹配的元素，选择器: \"${selector}\"`);\n    }\n\n    // 如果找到的元素不是 HTMLElement 类型，也抛出异常\n    if (!(element instanceof HTMLElement)) {\n      throw new Error(`选择器 \"${selector}\" 返回的元素不是 HTMLElement 类型`);\n    }\n\n    return element;\n  } catch (error) {\n    console.error(\"getHTMLElement 发生错误:\", error);\n    return null;\n  }\n}\n\n/**\n * 根据选择器获取 HTMLVideoElement 元素\n * @param parentElement 父容器，可以是 HTMLElement 或 Document\n * @param selector CSS 选择器，用于定位视频元素\n * @returns 找到的 HTMLVideoElement，如果出现异常则返回 null\n */\nexport function getHTMLVideoElement(parentElement: HTMLElement | Document, selector: string): HTMLVideoElement | null {\n  try {\n    const element = parentElement.querySelector(selector);\n\n    // 如果没有找到元素，抛出异常\n    if (!element) {\n      throw new Error(`未找到匹配的元素，选择器: \"${selector}\"`);\n    }\n\n    // 如果找到的元素不是 HTMLVideoElement 类型，抛出异常\n    if (!(element instanceof HTMLVideoElement)) {\n      throw new Error(`选择器 \"${selector}\" 返回的元素不是 HTMLVideoElement 类型`);\n    }\n\n    return element;\n  } catch (error) {\n    console.error(\"getHTMLVideoElement 发生错误:\", error);\n    return null;\n  }\n}\n\n/**\n * 根据选择器获取 HTMLImageElement 元素\n * @param parentElement 父容器，可以是 HTMLElement 或 Document\n * @param selector CSS 选择器，用于定位图片元素\n * @returns 找到的 HTMLImageElement，如果出现异常则返回 null\n */\nexport function getHTMLImgElement(parentElement: HTMLElement | Document, selector: string): HTMLImageElement | null {\n  try {\n    // 使用 querySelector 查找元素\n    const element = parentElement.querySelector(selector);\n\n    // 如果没有找到元素，则抛出异常\n    if (!element) {\n      throw new Error(`未找到匹配的元素，选择器: \"${selector}\"`);\n    }\n\n    // 如果找到的元素不是 HTMLImageElement 类型，也抛出异常\n    if (!(element instanceof HTMLImageElement)) {\n      throw new Error(`选择器 \"${selector}\" 返回的元素不是 HTMLImageElement 类型`);\n    }\n\n    return element;\n  } catch (error) {\n    console.error(\"getHTMLImgElement 发生错误:\", error);\n    return null;\n  }\n}\n\n/**\n * 检测是否存在指定的 HTMLElement 元素\n * @param parentElement 父容器，可以是 HTMLElement 或 Document\n * @param selector CSS 选择器字符串，用于定位元素\n * @returns 如果匹配到元素且属于 HTMLElement 类型，则返回 true，否则返回 false\n */\nexport function existsHTMLElement(parentElement: HTMLElement | Document, selector: string): boolean {\n  const element = parentElement.querySelector(selector);\n  return !!(element && element instanceof HTMLElement);\n}\n\n/**\n * 根据选择器查找 HTMLElement 元素\n * @param parentElement 父容器，可以是 HTMLElement 或 Document\n * @param selector CSS 选择器字符串\n * @returns 找到的 HTMLElement 或 null\n */\nexport function findHTMLElement(parentElement: HTMLElement | Document, selector: string): HTMLElement | null {\n  const element = parentElement.querySelector(selector);\n  return (element && element instanceof HTMLElement) ? element : null;\n}\n\n/**\n * 生成一个唯一的 ID\n * @returns 一个唯一的字符串 ID\n */\nexport function generateUniqueId(): string {\n  // 如果支持 crypto.randomUUID，直接使用\n  if (typeof crypto !== 'undefined' && crypto.randomUUID) {\n    return crypto.randomUUID();\n  } else {\n    // 备用方案：使用当前时间戳和随机数生成唯一 ID\n    const timestamp = Date.now().toString(36);\n    const randomPart = Math.random().toString(36).substring(2, 10);\n    return `${timestamp}-${randomPart}`;\n  }\n}","console.log('%c执行content-teleram.js', 'color:red;background-color:#4fad4f;');\n// 创建一个新的 script 元素并设置其 src 属性为 inject.js 的路径\nconst script = document.createElement('script');\nscript.src = chrome.runtime.getURL('js/inject.js');\ndocument.head.appendChild(script);\nconst appContainer = document.createElement('div');\nappContainer.id = '__chrome-extension-app';\ndocument.body.appendChild(appContainer);\n\nimport { getHTMLElement, getHTMLImgElement, getHTMLVideoElement, findHTMLElement, generateUniqueId } from './utils';\n\n// 动态创建隔离环境\nconst iframe = document.createElement('iframe');\niframe.setAttribute('id', 'task-list-iframe');\niframe.setAttribute('sandbox', 'allow-scripts allow-same-origin');\niframe.src = chrome.runtime.getURL('../html/content.html');\n\n\n// 动画样式定义\nconst animationStyle = document.createElement('style');\nanimationStyle.textContent = `\n  @keyframes slideOutRight {\n    from {\n      transform: translateX(0);\n      opacity: 1;\n    }\n    to {\n      transform: translateX(100%);\n      opacity: 0;\n    }\n  }\n\n  @keyframes slideInRight {\n    from {\n      transform: translateX(100%);\n      opacity: 0;\n    }\n    to {\n      transform: translateX(0);\n      opacity: 1;\n    }\n  }\n\n  .iframe-animation {\n    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .slide-out {\n    animation: slideOutRight 0.5s forwards;\n  }\n\n  .slide-in {\n    animation: slideInRight 0.5s forwards;\n  }\n`;\ndocument.head.appendChild(animationStyle);\n\n// 初始化iframe样式\nObject.assign(iframe.style, {\n  position: 'fixed',\n  right: '0px',\n  bottom: '20px',\n  width: '400px',\n  height: '600px',\n  border: 'none',\n  'z-index': '2147483647',\n  'box-shadow': '0 0 10px rgba(0,0,0,0.2)',\n  'border-radius': '8px',\n  transform: 'translateX(0)', // 初始位置\n  opacity: '1' // 初始透明度\n});\n\n// 添加动画控制按钮\nconst toggleBtn = document.createElement('button');\nObject.assign(toggleBtn.style, {\n  position: 'fixed',\n  right: '20px',\n  bottom: '20px',\n  'z-index': '2147483647',\n  padding: '8px 16px',\n  'border-radius': '4px',\n  background: '#008aff',\n  color: 'white',\n  border: 'none',\n  cursor: 'pointer'\n});\ntoggleBtn.textContent = 'Toggle Panel';\ndocument.body.appendChild(toggleBtn);\n\n// 创建一个按钮用于调整 iframe 宽度\nconst resizeBtn = document.createElement('button');\nObject.assign(resizeBtn.style, {\n  position: 'fixed',\n  right: '20px',\n  top: '20px', // 与 toggleBtn 保持一定距离\n  'z-index': '2147483647',\n  padding: '8px 16px',\n  'border-radius': '4px',\n  background: '#008aff',\n  color: 'white',\n  border: 'none',\n  cursor: 'pointer'\n});\nresizeBtn.textContent = '调整宽度';\ndocument.body.appendChild(resizeBtn);\n\n(() => {\n  let isVisible = true;\n  let isAnimating = false;\n  let isWide = false;\n\n\n\n  const toggleIframe = () => {\n    if (isAnimating) return;\n\n    isAnimating = true;\n\n    if (isVisible) {\n      iframe.classList.add('slide-out');\n      toggleBtn.textContent = '任务列表';\n    } else {\n      iframe.style.display = 'block';\n      iframe.classList.add('slide-in');\n      toggleBtn.textContent = '任务列表';\n    }\n\n    iframe.addEventListener('animationend', () => {\n      iframe.classList.remove(isVisible ? 'slide-out' : 'slide-in');\n      if (isVisible) {\n        iframe.style.display = 'none';\n      }\n      isVisible = !isVisible;\n      isAnimating = false;\n    }, { once: true });\n  };\n  toggleIframe();\n\n  const fullScreenContainer = () => {\n    if (isWide) {\n      iframe.style.width = '400px';\n      resizeBtn.textContent = '调整宽度';\n    } else {\n      const columnCenter = document.getElementById('column-center');\n      if (columnCenter) {\n        iframe.style.width = columnCenter.clientWidth + 'px';\n        resizeBtn.textContent = '恢复原宽度';\n      }\n    }\n    isWide = !isWide;\n  };\n\n  // 绑定事件\n  toggleBtn.addEventListener('click', toggleIframe);\n  resizeBtn.addEventListener('click', fullScreenContainer);\n  document.body.appendChild(iframe);\n\n  // ESC键关闭支持\n  document.addEventListener('keydown', (e) => {\n    if (e.key === 'Escape' && isVisible) {\n      toggleIframe();\n    }\n  });\n\n  // 直接获取扩展ID\n  const extensionId = chrome.runtime.id;\n  console.log('当前扩展ID:', extensionId);\n\n  window.addEventListener('message', (event) => {\n    // 定义预期的扩展消息来源\n    const expectedOrigin = 'chrome-extension://' + extensionId;\n\n    // 验证消息的来源是否符合预期\n    if (event.origin !== expectedOrigin) return;\n\n    if (event.data.type === 'closeIframe') {\n      // 执行对应操作\n      toggleIframe();\n    }\n    if (event.data.type === 'fullScreenContainer') {\n      fullScreenContainer();\n    }\n  });\n\n  // 默认语言设置为中文\n  let language = 'zh-CN';\n  // 定义中英文的本地化数据\n  const data = {\n    zh: {\n      dialog: {\n        title: '电报视频下载器',\n        context: '你的五星好评是我们前进最大的动力🙏',\n        loading: '正在检测中，请勿关闭当前页面！',\n        sure: '支持一下',\n        confirm: '残忍拒绝',\n        butImg: '下载图片',\n        butVideo: '下载视频',\n        butAllFile: '强制下载',\n        progressText: '下载进度：'\n      }\n    },\n    en: {\n      dialog: {\n        title: 'Telegram Video Downloader',\n        context: 'Your 5-star rating is our biggest motivation! 🙏',\n        loading: 'Under detection, please do not close the current page!',\n        sure: 'Show Support',\n        confirm: 'No Thanks',\n        butImg: 'DOWNLOAD IMAGE',\n        butVideo: 'DOWNLOAD VIDEO',\n        butAllFile: 'FORCE DOWNLOAD',\n        progressText: 'Download progress:'\n      }\n    }\n  };\n\n  let localizedText;\n\n  // 根据语言设置获取本地化数据\n  function getLocalizedData() {\n    return language.includes('zh') ? data['zh'] : data['en'];\n  }\n\n  // 检测用户的浏览器语言\n  function detectUserLanguage() {\n    const userLanguage = navigator.language;\n    if (userLanguage) {\n      language = userLanguage;\n    }\n  }\n\n  // 初始化语言和本地化文本\n  detectUserLanguage();\n  localizedText = getLocalizedData();\n\n  // 定义下载按钮的 HTML 模板\n  const imageDownloadButton = `\n    <div class=\"content-teleram-script\">\n      <div class=\"downloadBtnIns\" style=\"max-width: 420px; display: flex; justify-content: center;\">\n        <button class=\"download-images  down_btn_img\" data-text=\"FORCE DOWNLOAD\" title=\"Download all resources by default, or please select the resources you want to download in batches\" style=\"color: white; background-color: #008aff; border-radius: 5px;\">\n        ${localizedText.dialog.butImg}\n        </button>\n      </div>\n    </div>\n    `;\n  const videoDownloadButton = `\n    <div class=\"content-teleram-script\">\n      <div class=\"downloadBtnIns\" style=\"max-width: 420px; display: flex; justify-content: center;\">\n        <button class=\"download-videos down_btn_video\" data-text=\"FORCE DOWNLOAD\" title=\"Download all resources by default, or please select the resources you want to download in batches\" style=\"color: white; background-color: #008aff; border-radius: 5px;\">\n        ${localizedText.dialog.butVideo}\n        </button>\n      </div>\n    </div>\n    `;\n  const progressContainer = `\n    <div class=\"content-teleram-script down_btn_progress\"></div>\n    `;\n  const downloadCheckbox = '<input type=\"checkbox\" class=\"download-check-item\" name=\"checkbox-down\" checked=\"true\" />';\n  const allFilesDownloadButton = `\n    <div style=\"max-width: 420px; display: flex; justify-content: center;\" class=\"check-all-download\">\n        <button class=\"download-checkbox-all\" data-text=\"FORCE DOWNLOAD\" title=\"Download all resources by default, or please select the resources you want to download in batches\" style=\"color: white; background-color: #008aff; border-radius: 5px; padding: 5px 10px;\">\n        ${localizedText.dialog.butAllFile}\n        </button>\n    </div>\n    `;\n  const statusBoxInnerHTML = `<div class=\"status-box\"/> <div class=\"download-status\"/></div>`;\n\n  // 添加下载按钮到指定的父元素\n  const appendDownloadButton = (parentElement: HTMLElement, buttonType: string, buttonHtml: string, targetElement: HTMLElement | string) => {\n    let newElement: HTMLElement | null = null;\n    const existingButton = parentElement.querySelector('.down_btn_' + buttonType);\n\n    newElement = targetElement !== 'attachment' ? targetElement as HTMLElement : parentElement;\n\n    if (!existingButton) {\n      const wrapperDiv = document.createElement('div');\n      wrapperDiv.className = `${buttonType}-telegram-script`;\n      const uniqueId = generateUniqueId();\n      wrapperDiv.innerHTML = buttonHtml.trim();\n      const checkBox = wrapperDiv.querySelector('.download-check-item') as HTMLElement;\n      checkBox?.setAttribute('id', uniqueId);\n      if (newElement) {\n        // 添加选择框\n        newElement.appendChild(wrapperDiv.firstChild as Node);\n\n\n        if (checkBox) {\n          const wrapperDiv2 = document.createElement('div');\n          wrapperDiv2.className = `${buttonType}-telegram-script`;\n          const uniqueId = generateUniqueId();\n          wrapperDiv2.innerHTML = statusBoxInnerHTML.trim();\n\n          // 添加状态容器\n          const statusBox = wrapperDiv2.querySelector('.status-box') as HTMLElement;\n          statusBox.id = uniqueId;\n          newElement.appendChild(wrapperDiv2.firstChild as Node);\n        }\n\n      }\n\n    }\n  };\n\n  const statusContainer = `\n    <div class=\"script_status\" style=\"display: flex; justify-content: center;\">\n      <div class=\"script_status_text\" >\n        <span class=\"script_status_success\" style=\"display: none\">\n          <svg t=\"1740863833146\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"1464\" width=\"50\" height=\"50\"><path d=\"M512 85.333333c235.648 0 426.666667 191.018667 426.666667 426.666667s-191.018667 426.666667-426.666667 426.666667S85.333333 747.648 85.333333 512 276.352 85.333333 512 85.333333z m-74.965333 550.4L346.453333 545.152a42.666667 42.666667 0 1 0-60.330666 60.330667l120.704 120.704a42.666667 42.666667 0 0 0 60.330666 0l301.653334-301.696a42.666667 42.666667 0 1 0-60.288-60.330667l-271.530667 271.488z\" fill=\"#52C41A\" p-id=\"1465\"></path></svg>\n        </span>\n        <span class=\"script_status_error\" style=\"display: none\">\n          <svg t=\"1740863922754\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4255\" width=\"50\" height=\"50\"><path d=\"M512 1024C229.23264 1024 0 794.76736 0 512S229.23264 0 512 0s512 229.23264 512 512-229.23264 512-512 512z m0.7168-549.49888L324.93568 286.72 276.48 335.17568 464.26112 522.9568 276.48 710.73792l48.45568 48.45568L512.7168 571.41248 700.49792 759.1936l48.45568-48.45568L561.17248 522.9568 748.9536 335.17568 700.49792 286.72 512.7168 474.50112z\" fill=\"#F4420A\" p-id=\"4256\"></path></svg>\n        </span>\n        <span class=\"script_status_running\" style=\"display: none\">\n          <svg t=\"1740864280083\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"12594\" width=\"50\" height=\"50\"><path d=\"M535.68 512a48 48 0 0 1-14.08 35.2l-142.72 142.72a48 48 0 0 1-67.84-67.84L421.12 512 311.04 401.92a48 48 0 1 1 67.84-67.84l142.72 142.72a48 48 0 0 1 14.08 35.2z\" fill=\"#27BC7A\" p-id=\"12595\"></path><path d=\"M774.4 512a48 48 0 0 1-14.08 35.2l-142.72 142.72a48 48 0 0 1-67.84-67.84L659.84 512 549.76 401.92a48 48 0 0 1 67.84-67.84l142.72 142.72a48 48 0 0 1 14.08 35.2z\" fill=\"#27BC7A\" p-id=\"12596\"></path><path d=\"M512 1024a512 512 0 1 1 512-512 512 512 0 0 1-512 512z m0-96A416 416 0 1 0 96 512 416 416 0 0 0 512 928z\" fill=\"#27BC7A\" p-id=\"12597\"></path></svg>\n        </span>\n      </div>\n    </div>\n    `;\n\n  // 添加状态容器到指定的父元素\n  const appendStatusContainer = (parentElement: HTMLElement, id: string) => {\n    const progressContainerElement = document.createElement('div');\n    progressContainerElement.id = id;\n    progressContainerElement.innerHTML = statusContainer.trim();\n    parentElement.appendChild(progressContainerElement);\n  };\n\n  const initStatus = (statusContainerElement: HTMLElement) => {\n    const successElement = getHTMLElement(statusContainerElement, '.script_status_success') as HTMLElement;\n    successElement.style.display = 'none';\n    const errorElement = getHTMLElement(statusContainerElement, '.script_status_error') as HTMLElement;\n    errorElement.style.display = 'none';\n    const runningElement = getHTMLElement(statusContainerElement, '.script_status_running') as HTMLElement;\n    runningElement.style.display = 'none';\n  };\n\n  const setElementStatus = (id: string, status: string) => {\n    const statusContainerElement = document.getElementById(id) as HTMLElement;\n    const statusElement = getHTMLElement(statusContainerElement, '.download-status') as HTMLElement;\n    if (statusContainerElement) {\n      initStatus(statusContainerElement);\n      switch (status) {\n        case 'success':\n          statusElement.setAttribute('class', 'download-status status-success');\n          break;\n        case 'error':\n          statusElement.setAttribute('class', 'download-status status-error');\n          break;\n      }\n    }\n  };\n\n  const TaskSList: { id: string; status: string; info: string }[] = [];\n\n  const addTask = (id: string, status: string) => {\n    TaskSList.push({ id, status, info: '' });\n  }\n\n  const saveTaskStatus = (id: string, status: string, info: string) => {\n    if (info === null) {\n      addTask(id, status);\n      return;\n    }\n    TaskSList.forEach((item) => {\n      if (item.id === id) {\n        item.status = status;\n        item.info = info;\n      }\n    });\n  };\n\n  const sendMessageToIframe = (type: string, id: string | undefined, status: string, info: any) => {\n    console.log('%c sendMessageToIframe', 'color: red; font-weight: bold;', type, id, status, info);\n    if (!id) return;\n    const iframe = document.getElementById('task-list-iframe') as HTMLIFrameElement;\n    console.log('%c iframe', 'color: red; font-weight: bold;', iframe);\n    if (iframe?.contentWindow) {\n      console.log('%c iframe.contentWindow', 'color: red; font-weight: bold;', iframe.contentWindow);\n      // 修改 postMessage 的目标源为 '*'\n      iframe.contentWindow.postMessage({ type, id, status, info }, '*');\n    }\n  };\n\n  // 等待元素加载\n  const waitForElements = (container: HTMLElement | Document, selector: string, timeout = 15000): Promise<HTMLElement[]> => {\n    return new Promise((resolve, reject) => {\n      // 将 NodeList 转换为数组\n      const target = Array.from(container.querySelectorAll(selector)) as HTMLElement[];\n      if (target.length > 0) return resolve(target);\n\n      const observer = new MutationObserver((mutations) => {\n        const updatedTarget = Array.from(container.querySelectorAll(selector)) as HTMLElement[];\n        if (updatedTarget.length > 0) {\n          observer.disconnect();\n          resolve(updatedTarget);\n        }\n      });\n\n      // 开始观察整个文档\n      observer.observe(container, {\n        childList: true,\n        subtree: true\n      });\n\n      setTimeout(() => {\n        observer.disconnect();\n        reject(new Error(`元素 ${selector} 加载超时`));\n      }, timeout);\n    });\n  };\n\n  // 等待元素加载\n  const waitForElement = (selector: string, timeout = 15000): Promise<HTMLElement | Error> => {\n    return new Promise((resolve, reject) => {\n      // 如果已存在则直接返回\n      const target = document.querySelector(selector) as HTMLElement;\n      if (target) return resolve(target);\n\n      // 配置观察选项\n      const observer = new MutationObserver((mutations) => {\n        const updatedTarget = document.querySelector(selector) as HTMLElement;\n        if (updatedTarget) {\n          observer.disconnect();\n          resolve(updatedTarget);\n        }\n      });\n\n      // 开始观察整个文档\n      observer.observe(document.body, {\n        childList: true,\n        subtree: true\n      });\n\n      setTimeout(() => {\n        observer.disconnect();\n        reject(new Error(`元素 ${selector} 加载超时`));\n      }, timeout);\n    });\n  };\n\n  // 等待视频源加载\n  const waitForVideoSrcLoad = (videoElement: HTMLVideoElement, interval = 100): Promise<string | Error> => {\n    return new Promise((resolve, reject) => {\n      if (!videoElement) return reject(new Error('无效的视频元素'));\n\n      const checkSrc = setInterval(() => {\n        if (videoElement.src.includes('blob') || videoElement.src.includes('stream')) {\n          clearInterval(checkSrc);\n          clearTimeout(timeout);\n          resolve(videoElement.src);\n        }\n      }, interval);\n\n      // 可选：设置一个超时来避免无限等待\n      const timeout = setTimeout(() => {\n        clearInterval(checkSrc);\n        reject(new Error('等待视频源超时'));\n      }, 10000);\n    });\n  };\n\n  // 获取剪贴板中的文件名\n  const getFileNameByClipBoard = async () => {\n    try {\n      const clipboardText = await navigator.clipboard.readText();\n      return clipboardText;\n    } catch (error) {\n      return null;\n    }\n  };\n\n\n  /**\n   * 处理视频下载函数handleVideoDownload的可选参数\n   * @param mediaPhotoSrc 媒体图片的src\n   * @param taskId 任务id\n   */\n  interface handleVideoDownloadOptions {\n    mediaPhotoSrc?: string;\n    taskId?: string;\n  }\n\n  // 处理视频下载逻辑\n  const handleVideoDownload = async (mediaType: string, videoUrl: string, pageUrl: string, downloadId: string, fileType: string, containerElement: HTMLElement, options: handleVideoDownloadOptions = {}) => {\n    console.log('执行handleVideoDownload');\n    let lastRequestTime = 0;\n    const requestInterval = 500;\n    let currentTime = new Date().getTime();\n    if (currentTime - lastRequestTime < requestInterval) return;\n    lastRequestTime = currentTime;\n    let videoId = '';\n    if ('video' === fileType) {\n      const streamIndex = videoUrl.indexOf('stream/') + 'stream/'.length;\n      const encodedVideoId = videoUrl.substring(streamIndex);\n      const decodedVideoId = decodeURIComponent(encodedVideoId);\n      console.log('decodedVideoId', decodedVideoId);\n      const videoData = JSON.parse(decodedVideoId);\n      videoId = videoData.location.id;\n    }\n\n    // 监听视频下载进度\n    document.addEventListener(videoId + 'video_download_progress', (event: any) => {\n      console.log('video_download_progress', event);\n\n      const progressElement = containerElement.querySelector('.down_btn_progress') as HTMLElement;\n      const downloadButton = containerElement.querySelector('.down_btn_video') as HTMLElement;\n      const checkAllDownloadButton = containerElement.querySelector('.check-all-download') as HTMLElement;\n\n      if (event.detail.progress !== null && event.detail.progress !== '100' && containerElement !== null) {\n        sendMessageToIframe('down_task_status', event.detail.task_id, 'downloading', event.detail.progress);\n        let progressValue: number | string = 0;\n\n        if (downloadButton !== null) {\n          downloadButton.style.display = 'none';\n          progressValue = event.detail.progress;\n        }\n\n        if (checkAllDownloadButton !== null) {\n          checkAllDownloadButton.style.display = 'none';\n          progressValue = Math.max(-1, parseInt(event.detail.progress));\n        }\n\n        if (progressElement === null) {\n          const progressContainerElement = document.createElement('div');\n          progressContainerElement.className = 'progress-teleram-script';\n          progressContainerElement.innerHTML = progressContainer.trim();\n          containerElement.appendChild(progressContainerElement);\n        } else {\n          progressElement.style.display = 'block';\n          progressElement.innerHTML = `${localizedText.dialog.progressText} ${progressValue}%`;\n        }\n      } else {\n        if (downloadButton !== null) downloadButton.style.display = 'block';\n        if (checkAllDownloadButton !== null) checkAllDownloadButton.style.display = 'flex';\n        if (progressElement !== null) progressElement.style.display = 'none';\n      }\n      if (event.detail.progress === '100') {\n        sendMessageToIframe('down_task_status', event.detail.task_id, 'completed', event.detail.progress);\n        setElementStatus(event.detail.task_id, 'success');\n      }\n    });\n\n    console.log('%c options', 'color: red; font-weight: bold;', options)\n    if (options?.taskId) {\n      const fileName = await getFileNameByClipBoard();\n      const downloadEventDetail = {\n        type: mediaType,\n        video_src: {\n          video_url: videoUrl,\n          video_id: videoId,\n          page: pageUrl,\n          download_id: downloadId,\n          fileName: fileName,\n          taskId: options.taskId\n        }\n      };\n      window.postMessage(downloadEventDetail, '*');\n      sendMessageToIframe('add_task', options.taskId, 'pending', options.mediaPhotoSrc);\n    }\n  };\n\n  // 初始化下载按钮事件\n  const initializeDownloadButton = (containerElement: HTMLElement, mediaElement: HTMLImageElement | HTMLVideoElement, mediaType: string, downloadIndex: number) => {\n    const downloadButton = getHTMLElement(containerElement, '.down_btn_' + mediaType);\n    if (downloadButton && mediaElement) {\n      const currentUrl = window.location.href;\n      const hashIndex = currentUrl.indexOf('#');\n      currentUrl.substring(0, hashIndex);\n      downloadButton.addEventListener('click', (event) => {\n        event.preventDefault();\n        event.stopPropagation();\n        if (mediaType === 'video') {\n          handleVideoDownload('single', mediaElement.src, currentUrl, String(downloadIndex + 1), 'video', containerElement);\n        } else if (mediaType === 'img') {\n          handleVideoDownload('single', mediaElement.src, currentUrl, String(downloadIndex + 1), 'image', containerElement);\n        } else {\n          console.error('Unsupported media type:', mediaType);\n        }\n      });\n    }\n  };\n\n  // 点击事件延时处理\n  const clickWithTimeout = (element: HTMLElement, timeout = 500) =>\n    new Promise((resolve, reject) => {\n      element.click();\n      setTimeout(resolve, timeout);\n    });\n\n  // 处理相册媒体（优化版）\n  const processAlbumMedia = (mediaElement: HTMLElement, downloadIndex: string, containerElement: HTMLElement): Promise<void> => {\n    return new Promise<void>((resolve, reject) => {\n      (async () => {\n        try {\n          const parent = mediaElement.parentNode as HTMLElement;\n          const statusBox = parent.querySelector('.status-box');\n          const taskId = statusBox?.getAttribute('id') || undefined;\n          const albumMedia = getHTMLElement(parent, '.album-item-media') as HTMLElement;\n          const mediaPhotoSrc = albumMedia.querySelector('.media-photo')?.getAttribute('src') || '';\n          albumMedia.click();\n\n          const mediaViewerContainer = await waitForElement('.media-viewer-movers');\n          if (mediaViewerContainer instanceof Error) {\n            throw mediaViewerContainer\n          }\n\n          // 获取视频元素\n          const videoElements = await waitForElements(mediaViewerContainer, '.media-viewer-aspecter video');\n          const videoElement = videoElements[0] as HTMLVideoElement;\n          console.log('videoElement:', videoElement);\n\n          // 等待有效视频源\n          const videoSrc = await waitForVideoSrcLoad(videoElement);\n          if (videoSrc instanceof Error) {\n            throw videoSrc\n          }\n          console.log('videoSrc:', videoSrc);\n\n          // 处理不同视频源类型\n          if (videoSrc.includes('blob')) {\n            console.log('检测到blob视频源');\n            const menuElements = await waitForElements(document, '.quality-download-options-button-menu');\n            const buttonMenu = menuElements[0] as HTMLElement;\n\n            // 增强版菜单点击（带重试机制）\n            const maxRetries = 3;\n            let retryCount = 0;\n\n            const clickMenuWithRetry = async (): Promise<void> => {\n              while (retryCount < maxRetries) {\n                try {\n                  await clickWithTimeout(buttonMenu, 300);\n                  console.log(`第 ${retryCount + 1} 次点击下载菜单`);\n\n                  // 等待菜单项加载（带超时检测）\n                  const menuItems = await Promise.race([\n                    waitForElements(buttonMenu, '.btn-menu-item', 1000),\n                    new Promise<Element[]>((_, reject) =>\n                      setTimeout(() => reject(new Error('菜单项加载超时')), 1000)\n                    )\n                  ]) as Element[];\n\n                  if (menuItems.length > 0) {\n                    await clickWithTimeout(menuItems[0] as HTMLElement, 100);\n                    console.log('已选择下载选项');\n                    return; // 成功则退出循环\n                  }\n                } catch (error) {\n                  console.warn(`菜单操作失败（尝试 ${retryCount + 1}/${maxRetries}）:`, error);\n                  retryCount++;\n\n                  // 增加指数退避延迟\n                  await new Promise((resolve) => setTimeout(resolve, 500 * Math.pow(2, retryCount)));\n                }\n              }\n              throw new Error(`连续 ${maxRetries} 次尝试打开菜单失败`);\n            };\n\n            await clickMenuWithRetry();\n          } else {\n            console.log('检测到stream视频源，开始下载 handleVideoDownload');\n            handleVideoDownload('single', videoSrc, window.location.href, downloadIndex + 1, 'video', containerElement, { taskId, mediaPhotoSrc });\n          }\n\n          // 统一关闭查看器\n          const closeViewer = () => {\n            const topbar = document.querySelector('.media-viewer-topbar') as HTMLElement;\n            topbar?.click();\n            console.log('已关闭视频查看器');\n          };\n\n          // 添加关闭超时保护\n          setTimeout(() => {\n            closeViewer();\n            resolve();\n          }, 500);\n        } catch (error) {\n          console.error('处理相册媒体时出错:', error);\n          reject(error);\n        } finally {\n          // 清理可能残留的查看器\n          const topbar = document.querySelector('.media-viewer-topbar') as HTMLElement;\n          topbar?.click();\n        }\n      })();  // 立即执行\n    });\n  };\n\n  // 初始化下载处理程序\n  const initializeDownloadHandlers = () => {\n    // 获取所有的消息气泡元素\n    const messageBubbles = document.querySelectorAll('.bubble-content-wrapper') as NodeListOf<HTMLElement>;\n\n    // 遍历每个消息气泡\n    messageBubbles.forEach((messageBubble, index) => {\n      // 查找消息气泡中的图片元素\n      const imageElement = messageBubble.querySelector('.media-photo') as HTMLImageElement;\n      // 查找消息气泡中的脚本内容\n      const scriptContent = messageBubble.querySelector('.content-teleram-script');\n      // 查找消息气泡中的视频元素\n      const videoElement = messageBubble.querySelector('.media-video') as HTMLVideoElement;\n      // 查找消息气泡中的相册项\n      const albumItems = messageBubble.querySelectorAll('.album-item') as NodeListOf<HTMLElement>;\n      // 查找消息气泡中的视频时长\n      const videoDuration = messageBubble.querySelector('.video-time') as HTMLElement;\n\n      // 如果没有脚本内容且没有相册项，并且存在图片元素\n      if (scriptContent === null && albumItems.length === 0 && imageElement !== null) {\n        // 如果存在视频元素和视频时长\n        if (videoElement !== null && videoDuration !== null) {\n          // 添加视频下载按钮并初始化下载按钮事件\n          appendDownloadButton(messageBubble, 'video', videoDownloadButton, 'attachment');\n          initializeDownloadButton(messageBubble, videoElement, 'video', index);\n        }\n\n        // 如果存在视频时长但没有视频元素\n        if (videoDuration !== null && videoElement === null) {\n          // 添加视频下载按钮\n          appendDownloadButton(messageBubble, 'video', videoDownloadButton, 'attachment');\n\n          // 为视频下载按钮添加点击事件\n          const downBtnVideo = getHTMLElement(messageBubble, '.down_btn_video') as HTMLElement;\n          downBtnVideo?.addEventListener('click', (event) => {\n            console.log('messageBubble   click');\n            event.preventDefault();\n            event.stopPropagation();\n\n            // 模拟点击图片以打开视频查看器\n            const mediaPhoto = getHTMLElement(messageBubble, '.media-photo') as HTMLImageElement;\n            const mediaPhotoSrc = mediaPhoto.src;\n            mediaPhoto?.click();\n\n            setTimeout(() => {\n              // 获取媒体查看器容器\n              const mediaViewerContainer = getHTMLElement(document, '.media-viewer-movers') as HTMLElement;\n              // 获取查看器中的视频元素\n              const videoInViewer = getHTMLVideoElement(mediaViewerContainer, '.media-viewer-aspecter video') as HTMLVideoElement;\n              // 如果src包含blob，点击原生按钮下载\n              if (videoInViewer.src.includes('blob')) {\n                waitForElements(document, '.quality-download-options-button-menu').then((elements) => {\n                  setTimeout(() => {\n                    const buttonMenu = elements[0] as HTMLElement;\n                    buttonMenu.click();\n                    console.log('button-menu click');\n                    waitForElements(buttonMenu, '.btn-menu-item').then((elements) => {\n                      setTimeout(() => {\n                        elements[0]?.click();\n                        console.log('elements[0] click');\n                        setTimeout(() => {\n                          const topbar = getHTMLElement(document, '.media-viewer-topbar') as HTMLElement;\n                          topbar?.click();\n                          console.log('关闭blob视频查看器');\n                        }, 500);\n                      }, 100);\n                    });\n                  }, 100);\n                });\n              } else {\n                // 处理视频下载\n                handleVideoDownload('single', videoInViewer.src, window.location.href, String(index + 1), 'video', messageBubble, { mediaPhotoSrc: mediaPhotoSrc });\n                // 关闭视频查看器\n                const topbar = getHTMLElement(document, '.media-viewer-topbar') as HTMLElement;\n                topbar?.click();\n              }\n            }, 800);\n          });\n        }\n\n        // 如果没有视频时长且没有视频元素\n        if (videoDuration === null && videoElement === null) {\n          // 添加图片下载按钮并初始化下载按钮事件\n          appendDownloadButton(messageBubble, 'img', imageDownloadButton, 'attachment');\n          initializeDownloadButton(messageBubble, imageElement, 'img', index);\n        }\n      }\n\n      // 为每个相册项添加下载复选框\n      albumItems.forEach((albumItem) => {\n        const hasDownloadCheckbox = albumItem.querySelector('.download-check-item');\n        if (!hasDownloadCheckbox) {\n          appendDownloadButton(albumItem, 'check', downloadCheckbox, albumItem);\n        }\n      });\n\n      // 查找所有的下载全部按钮\n      const allDownloadButton = messageBubble.querySelectorAll('.download-checkbox-all');\n\n      // 如果没有下载全部按钮且存在相册项\n      if (allDownloadButton.length === 0 && messageBubble.querySelector('.album-item') !== null) {\n        // 添加下载全部按钮\n        appendDownloadButton(messageBubble, 'downloadAll', allFilesDownloadButton, messageBubble);\n\n        // 为下载全部按钮添加点击事件\n        messageBubble.querySelectorAll('.download-checkbox-all').forEach((checkbox) => {\n          const parentContainer = checkbox.parentNode?.parentNode as HTMLElement;\n\n          checkbox.addEventListener('click', async (event) => {\n            event.preventDefault();\n            event.stopPropagation();\n\n            // 获取所有的单个下载复选框\n            const individualDownloadCheckboxes = parentContainer.querySelectorAll('.download-check-item');\n            // 修复方案：将 NodeList 转换为数组\n            const checkboxesArray = Array.from(individualDownloadCheckboxes);\n\n            let downloadChain = Promise.resolve();\n\n            // 修改为异步reduce\n            downloadChain = checkboxesArray.reduce(async (chain, checkbox, itemIndex) => {\n              const checkboxInput = checkbox as HTMLInputElement;\n              if (!checkboxInput.checked) return chain;\n              await chain;\n\n              const videoTimeIndicator = checkboxInput.parentNode?.querySelector('.video-time');\n              if (videoTimeIndicator === null) {\n                const imageUrl = (checkboxInput.parentNode?.querySelector('.media-photo') as HTMLImageElement).src;\n                handleVideoDownload('single', imageUrl, imageUrl, String(itemIndex + 1), 'image', messageBubble);\n              } else {\n                try {\n                  await processAlbumMedia(checkboxInput, String(itemIndex + 1), messageBubble);\n                } catch (error) {\n                  console.error(`相册项 ${itemIndex} 下载失败:`, error);\n                }\n              }\n            }, Promise.resolve());\n\n            // 添加最终状态处理\n            downloadChain.then(() => console.log('所有下载任务完成')).catch((finalError) => console.error('下载链意外终止:', finalError));\n          });\n        });\n      }\n    });\n  };\n\n  // 异步获取 Blob 数据\n  const fetchBlobAsync = async (url: string) => {\n    try {\n      const response = await fetch(url);\n      const blob = await response.blob();\n      return blob;\n    } catch (error) {\n      throw (console.error('Fetch error:', error), error);\n    }\n  };\n\n  let g: any[] = [];\n  // 异步处理媒体元素\n  const processMediaElementsAsync = async () => {\n    const bubbleContentWrappers = document.querySelectorAll('.bubble-content-wrapper') as NodeListOf<HTMLElement>;\n    let mediaDetails: { index: number; fileName: string; type: string; size: string; }[] = [];\n\n    for (let index = 0; index < bubbleContentWrappers.length; index++) {\n      const wrapper = bubbleContentWrappers[index];\n      const imageElement = wrapper.querySelector('.media-photo') as HTMLImageElement;\n      const videoElement = wrapper.querySelector('.media-video') as HTMLVideoElement;\n      const videoTimeElement = wrapper.querySelector('.video-time') as HTMLElement;\n\n      if (imageElement !== null && videoTimeElement === null) {\n        try {\n          const imageBlob = await fetchBlobAsync(imageElement.src);\n          const imageSizeMB = (imageBlob.size / 1048576).toFixed(2);\n          const imageDetails = {\n            index: index,\n            fileName: imageElement.src,\n            type: 'image',\n            size: imageSizeMB + 'MB'\n          };\n          mediaDetails.push(imageDetails);\n        } catch (error) {\n          console.error('Error fetching image:', error);\n        }\n      }\n\n      if (videoElement !== null) {\n        try {\n          const streamIndex = videoElement.src?.indexOf('stream/') + 'stream/'.length;\n          const encodedVideoData = videoElement.src?.substring(streamIndex);\n          const decodedVideoData = decodeURIComponent(encodedVideoData);\n          const videoData = JSON.parse(decodedVideoData);\n          const videoSizeMB = (videoData.size / 1048576).toFixed(2);\n\n          const videoDetails = {\n            index: index,\n            fileName: imageElement?.src,\n            videoUrl: videoElement.src,\n            type: videoData.mimeType,\n            size: videoSizeMB + 'MB',\n            videoObj: videoData\n          };\n          mediaDetails.push(videoDetails);\n        } catch (error) {\n          console.error('Error fetching videoDetails:', error);\n        }\n      }\n    }\n\n    if (mediaDetails.length > 0) {\n      g = mediaDetails;\n    }\n  };\n\n  // 监听来自后台的消息\n  chrome.runtime.onMessage.addListener((message: { action: string; data: any; }, sender: chrome.runtime.MessageSender, sendResponse: (response: any) => void) => {\n    if (message.action === 'executeScript') {\n      const videoDetails = {\n        type: message.data.type_tent,\n        video_src: {\n          video_url: message.data.url_tent,\n          video_id: message.data.id_tent,\n          page: message.data.current_url_tent,\n          download_id: message.data.bin_index_tent\n        }\n      };\n      console.log('来自后台的消息 videoDetails', videoDetails);\n      const videoDownloadEvent = new CustomEvent('video_download', { detail: videoDetails });\n      document.dispatchEvent(videoDownloadEvent);\n    } else if ('popupSendData' === message.action) {\n      sendResponse({ data: g });\n    } else {\n      console.log('content-teleram-not-find');\n    }\n    return true;\n  });\n\n  // 定时初始化下载处理程序和处理媒体元素\n  setInterval(() => {\n    initializeDownloadHandlers();\n    processMediaElementsAsync();\n  }, 5000);\n})();\n\n\n"],"names":["getHTMLElement","parentElement","selector","element","error","getHTMLVideoElement","generateUniqueId","timestamp","randomPart","script","appContainer","iframe","animationStyle","toggleBtn","resizeBtn","isVisible","isAnimating","isWide","toggleIframe","fullScreenContainer","columnCenter","e","extensionId","event","expectedOrigin","language","data","localizedText","getLocalizedData","detectUserLanguage","userLanguage","imageDownloadButton","videoDownloadButton","progressContainer","downloadCheckbox","allFilesDownloadButton","statusBoxInnerHTML","appendDownloadButton","buttonType","buttonHtml","targetElement","newElement","existingButton","wrapperDiv","uniqueId","checkBox","wrapperDiv2","statusBox","initStatus","statusContainerElement","successElement","errorElement","runningElement","setElementStatus","id","status","statusElement","sendMessageToIframe","type","info","waitForElements","container","timeout","resolve","reject","target","observer","mutations","updatedTarget","waitForElement","waitForVideoSrcLoad","videoElement","interval","checkSrc","getFileNameByClipBoard","handleVideoDownload","mediaType","videoUrl","pageUrl","downloadId","fileType","containerElement","options","lastRequestTime","requestInterval","currentTime","videoId","streamIndex","encodedVideoId","decodedVideoId","progressElement","downloadButton","checkAllDownloadButton","progressValue","progressContainerElement","fileName","downloadEventDetail","initializeDownloadButton","mediaElement","downloadIndex","currentUrl","hashIndex","clickWithTimeout","processAlbumMedia","_a","parent","taskId","albumMedia","mediaPhotoSrc","mediaViewerContainer","videoSrc","buttonMenu","maxRetries","retryCount","menuItems","_","closeViewer","topbar","initializeDownloadHandlers","messageBubble","index","imageElement","scriptContent","albumItems","videoDuration","downBtnVideo","mediaPhoto","videoInViewer","elements","albumItem","checkbox","parentContainer","individualDownloadCheckboxes","checkboxesArray","downloadChain","chain","itemIndex","_b","checkboxInput","imageUrl","finalError","fetchBlobAsync","url","g","processMediaElementsAsync","bubbleContentWrappers","mediaDetails","wrapper","videoTimeElement","imageSizeMB","imageDetails","encodedVideoData","decodedVideoData","videoData","videoSizeMB","videoDetails","message","sender","sendResponse","videoDownloadEvent"],"mappings":"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"}