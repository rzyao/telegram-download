{"version":3,"file":"inject.js","sources":["../../src/inject.ts"],"sourcesContent":["(() => {\n  interface Logger {\n    info: (message: string, context?: string | null) => void;\n    error: (message: any, context?: string | null) => void;\n  }\n\n  const log: Logger = {\n    info: (message, context = null) => {\n      console.log(`%c[Tel Download] ${context ? context + ': ' : ''}${message}`, 'color: blue;');\n    },\n    error: (message, context = null) => {\n      console.info(`%c[Tel Download] ${context ? context + ': ' : ''}${message}`, 'color: red;');\n    }\n  };\n\n  const byteRangePattern = /^bytes (\\d+)-(\\d+)\\/(\\d+)$/;\n\n  /**\n   * 下载视频\n   * @param videoUrl 视频链接\n   * @param videoId 视频ID，可选\n   * @param page 页码，可选\n   * @param downloadId 下载ID，可选\n   * @param clipboardText 剪贴板中预设的文件名，可选\n   */\n  async function downloadVideo(\n    videoUrl: string,\n    videoId: string = '',\n    page?: number,\n    downloadId?: string,\n    clipboardText?: string | null,\n    taskId?: string\n  ): Promise<void> {\n    let blobParts: Blob[] = [];\n    let currentOffset: number = 0;\n    let totalSize: number | null = null;\n    let fileExtension: string = 'mp4';\n    let fileName: string = clipboardText || '';\n\n    if (!fileName) {\n      try {\n        const urlSegments = videoUrl.split('/');\n        const lastSegment = urlSegments.pop();\n        if (lastSegment) {\n          const decodedData = decodeURIComponent(lastSegment);\n          const videoData = JSON.parse(decodedData);\n          fileName = videoData.fileName || '';\n        }\n      } catch (error) {\n        console.error('文件名解析失败:', error);\n        fileName = 'video';\n      }\n    }\n\n    log.info('URL: ' + videoUrl, fileName);\n\n    /**\n     * 分片下载视频文件\n     * @param retryCount 当前重试次数，默认为0\n     */\n    const fetchVideo = (retryCount: number = 0, index: number = 0): void => {\n      index = index + 1\n      // 使用fetch API发起HTTP请求，支持断点续传\n      fetch(videoUrl, {\n        method: 'GET',\n        headers: { Range: `bytes=${currentOffset}-` }  // 设置Range头，请求指定字节范围的数据\n      })\n        .then(async (response) => {\n          // 检查响应状态码是否正确(200表示完整响应，206表示部分内容响应)\n          if (![200, 206].includes(response.status)) {\n            if (retryCount < 3) {  // 如果失败次数小于3次，进行重试\n              retryCount++;\n              fetchVideo(retryCount, index);\n            } else {\n              throw new Error('非200/206响应: ' + response.status);\n            }\n          }\n\n          // 从Content-Type头获取文件扩展名\n          const contentType = response.headers.get('Content-Type')?.split(';')[0] || '';\n          fileExtension = contentType.split('/')[1] || fileExtension;\n\n          // 更新文件名：保留原文件名的基础部分，更新扩展名\n          const dotIndex = fileName.indexOf('.');\n          fileName = (dotIndex !== -1 ? fileName.substring(0, dotIndex + 1) : fileName + '.') + fileExtension;\n\n          // 验证Content-Range头是否存在和格式是否正确\n          const contentRangeHeader = response.headers.get('Content-Range');\n          if (!contentRangeHeader) {\n            console.error('Content-Range头缺失.', response);\n            throw new Error('Content-Range头缺失.');\n          }\n          const contentRange = contentRangeHeader.match(byteRangePattern);\n          if (!contentRange) {\n            console.error('Content-Range格式错误.', response);\n            throw new Error('Content-Range格式错误.');\n          }\n\n          // 解析Content-Range中的字节范围信息\n          const startByte = parseInt(contentRange[1], 10);  // 当前片段的起始字节\n          const endByte = parseInt(contentRange[2], 10);    // 当前片段的结束字节\n          const totalBytes = parseInt(contentRange[3], 10); // 文件总字节数\n\n          // 验证数据连续性和一致性\n          if (startByte !== currentOffset) {\n            throw new Error('检测到回复片段之间存在差距.');\n          }\n          if (totalSize !== null && totalBytes !== totalSize) {\n            throw new Error('总大小不一致.');\n          }\n\n          // 更新下载进度信息\n          currentOffset = endByte + 1;  // 更新下一次请求的起始位置\n          totalSize = totalBytes;       // 更新文件总大小\n\n          // 记录下载进度日志\n          log.info(`Get response: ${response.headers.get('Content-Length')} bytes data from ${contentRangeHeader}`, fileName);\n          log.info(`Progress: ${((100 * currentOffset) / totalSize).toFixed(0)}%`, fileName);\n\n          // 如果存在videoId，发送下载进度事件\n          if (videoId !== '') {\n            const progressEvent = new CustomEvent(videoId + 'video_download_progress', {\n              detail: {\n                video_id: videoId,\n                progress: ((100 * currentOffset) / totalSize).toFixed(0),\n                page: page,\n                download_id: downloadId,\n                task_id: taskId\n              }\n            });\n            document.dispatchEvent(progressEvent);\n          }\n\n          return response;\n        })\n        .then(async (response) => {\n          // 将响应数据转换为Blob并存储\n          const blob = await response.blob();\n          blobParts.push(blob);\n        })\n        .then(() => {\n          // 检查是否需要继续下载\n          if (totalSize === null) {\n            throw new Error('_total_size is NULL');\n          }\n          if (currentOffset < totalSize) {\n            fetchVideo(0, index);  // 如果还有数据，继续下载下一个片段\n          } else {\n            finalizeDownload();  // 所有片段下载完成，开始合并文件\n          }\n        })\n        .catch((error: any) => {\n          // 错误处理和重试逻辑\n          if (retryCount < 3) {\n            retryCount++;\n            fetchVideo(retryCount);  // 重试当前片段的下载\n          } else {\n            log.error('下载失败', fileName);  // 超过最大重试次数，放弃下载\n          }\n        });\n    };\n\n    const finalizeDownload = async (): Promise<void> => {\n      log.info('Finish downloading blobs', fileName);\n      log.info('Concatenating blobs and downloading...', fileName);\n\n      const finalBlob = new Blob(blobParts, { type: 'video/mp4' });\n      const blobUrl = window.URL.createObjectURL(finalBlob);\n\n      log.info('Final blob size: ' + finalBlob.size + ' bytes', fileName);\n\n      const downloadLink = document.createElement('a');\n      document.body.appendChild(downloadLink);\n      downloadLink.href = blobUrl;\n      downloadLink.download = fileName;\n      downloadLink.click();\n      document.body.removeChild(downloadLink);\n      window.URL.revokeObjectURL(blobUrl);\n\n      log.info('Download triggered', fileName);\n    };\n\n    fetchVideo();\n  }\n\n  // 监听 message 事件，根据消息类型执行下载操作\n  window.addEventListener('message', (event: MessageEvent) => {\n    const messageData = event.data;\n    if (messageData && typeof messageData === 'object') {\n      if (messageData.type === 'single') {\n        downloadVideo(\n          messageData.video_url,\n          messageData.video_id,\n          messageData.page,\n          messageData.download_id,\n          messageData.fileName,\n          messageData.taskId\n        );\n      } else if (messageData.type === 'batch') {\n        const videoSources = messageData.detail as Array<any>;\n        for (let i = 0; i < videoSources.length; i++) {\n          downloadVideo(\n            videoSources[i].video_url,\n            videoSources[i].video_id,\n            videoSources[i].page,\n            videoSources[i].download_id,\n            videoSources[i].fileName,\n            videoSources[i].taskId\n          );\n        }\n      }\n    }\n  });\n})()"],"names":[],"mappings":"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"}