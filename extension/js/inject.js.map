{"version":3,"file":"inject.js","sources":["../../src/inject.ts"],"sourcesContent":["interface Logger {\n  info: (message: string, context?: string | null) => void;\n  error: (message: any, context?: string | null) => void;\n}\n\nconst logger: Logger = {\n  info: (message, context = null) => {\n    console.log(`[Tel Download] ${context ? context + ': ' : ''}${message}`);\n  },\n  error: (message, context = null) => {\n    console.error(`[Tel Download] ${context ? context + ': ' : ''}${message}`);\n  }\n};\n\nconst byteRangePattern = /^bytes (\\d+)-(\\d+)\\/(\\d+)$/;\n\n/**\n * 下载视频\n * @param videoUrl 视频链接\n * @param videoId 视频ID，可选\n * @param page 页码，可选\n * @param downloadId 下载ID，可选\n * @param clipboardText 剪贴板中预设的文件名，可选\n */\nasync function downloadVideo(\n  videoUrl: string,\n  videoId: string = '',\n  page?: number,\n  downloadId?: string,\n  clipboardText?: string | null,\n  taskId?: string\n): Promise<void> {\n  let blobParts: Blob[] = [];\n  let currentOffset: number = 0;\n  let totalSize: number | null = null;\n  let fileExtension: string = 'mp4';\n  let fileName: string = clipboardText || '';\n\n  if (!fileName) {\n    try {\n      const urlSegments = videoUrl.split('/');\n      const lastSegment = urlSegments.pop();\n      if (lastSegment) {\n        const decodedData = decodeURIComponent(lastSegment);\n        const videoData = JSON.parse(decodedData);\n        fileName = videoData.fileName || '';\n      }\n    } catch (error) {\n      console.error('文件名解析失败:', error);\n      fileName = 'video';\n    }\n  }\n\n  logger.info('URL: ' + videoUrl, fileName);\n\n  const fetchVideo = (): void => {\n    fetch(videoUrl, {\n      method: 'GET',\n      headers: { Range: `bytes=${currentOffset}-` }\n      // 注意：某些 header（如 User-Agent）在浏览器环境下不可修改\n    })\n      .then(async (response) => {\n        if (![200, 206].includes(response.status)) {\n          throw new Error('Non 200/206 response was received: ' + response.status);\n        }\n        const contentType = response.headers.get('Content-Type')?.split(';')[0] || '';\n        fileExtension = contentType.split('/')[1] || fileExtension;\n        // 更新文件名：取点前部分并追加新扩展名\n        const dotIndex = fileName.indexOf('.');\n        fileName = (dotIndex !== -1 ? fileName.substring(0, dotIndex + 1) : fileName + '.') + fileExtension;\n\n        const contentRangeHeader = response.headers.get('Content-Range');\n        if (!contentRangeHeader) {\n          throw new Error('Content-Range header missing');\n        }\n        const contentRange = contentRangeHeader.match(byteRangePattern);\n        if (!contentRange) {\n          throw new Error('Content-Range format error');\n        }\n\n        const startByte = parseInt(contentRange[1], 10);\n        const endByte = parseInt(contentRange[2], 10);\n        const totalBytes = parseInt(contentRange[3], 10);\n\n        if (startByte !== currentOffset) {\n          throw new Error('Gap detected between responses.');\n        }\n        if (totalSize !== null && totalBytes !== totalSize) {\n          throw new Error('Total size differs');\n        }\n\n        currentOffset = endByte + 1;\n        totalSize = totalBytes;\n\n        logger.info(`Get response: ${response.headers.get('Content-Length')} bytes data from ${contentRangeHeader}`, fileName);\n        logger.info(`Progress: ${((100 * currentOffset) / totalSize).toFixed(0)}%`, fileName);\n\n        if (videoId !== '') {\n          const progressEvent = new CustomEvent(videoId + 'video_download_progress', {\n            detail: {\n              video_id: videoId,\n              progress: ((100 * currentOffset) / totalSize).toFixed(0),\n              page: page,\n              download_id: downloadId,\n              task_id: taskId\n            }\n          });\n          document.dispatchEvent(progressEvent);\n        }\n\n        return response.blob();\n      })\n      .then((blob: Blob) => {\n        blobParts.push(blob);\n      })\n      .then(() => {\n        if (totalSize === null) {\n          throw new Error('_total_size is NULL');\n        }\n        if (currentOffset < totalSize) {\n          fetchVideo();\n        } else {\n          finalizeDownload();\n        }\n      })\n      .catch((error: any) => {\n        logger.error(error, fileName);\n      });\n  };\n\n  const finalizeDownload = async (): Promise<void> => {\n    logger.info('Finish downloading blobs', fileName);\n    logger.info('Concatenating blobs and downloading...', fileName);\n\n    const finalBlob = new Blob(blobParts, { type: 'video/mp4' });\n    const blobUrl = window.URL.createObjectURL(finalBlob);\n\n    logger.info('Final blob size: ' + finalBlob.size + ' bytes', fileName);\n\n    const downloadLink = document.createElement('a');\n    document.body.appendChild(downloadLink);\n    downloadLink.href = blobUrl;\n    downloadLink.download = fileName;\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n    window.URL.revokeObjectURL(blobUrl);\n\n    logger.info('Download triggered', fileName);\n  };\n\n  fetchVideo();\n}\n\n// 监听 message 事件，根据消息类型执行下载操作\nwindow.addEventListener('message', (event: MessageEvent) => {\n  const messageData = event.data;\n  if (messageData && typeof messageData === 'object') {\n    if (messageData.type === 'single') {\n      downloadVideo(\n        messageData.video_src.video_url,\n        messageData.video_src.video_id,\n        messageData.video_src.page,\n        messageData.video_src.download_id,\n        messageData.video_src.fileName,\n        messageData.video_src.taskId\n      );\n    } else if (messageData.type === 'batch') {\n      const videoSources = messageData.video_src as Array<any>;\n      for (let i = 0; i < videoSources.length; i++) {\n        downloadVideo(\n          videoSources[i].video_url,\n          videoSources[i].video_id,\n          videoSources[i].page,\n          videoSources[i].download_id,\n          videoSources[i].fileName,\n          videoSources[i].taskId\n        );\n      }\n    }\n  }\n}); "],"names":["logger","message","context","byteRangePattern","downloadVideo","videoUrl","videoId","page","downloadId","clipboardText","taskId","blobParts","currentOffset","totalSize","fileExtension","fileName","lastSegment","decodedData","error","fetchVideo","response","_a","dotIndex","contentRangeHeader","contentRange","startByte","endByte","totalBytes","progressEvent","blob","finalizeDownload","finalBlob","blobUrl","downloadLink","event","messageData","videoSources","i"],"mappings":"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"}